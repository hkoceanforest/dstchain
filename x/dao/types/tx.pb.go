// Code generated by protoc-gen-gogo. DO NOT EDIT.

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

const _ = proto.GoGoProtoPackageIsVersion3 

type MsgReceivePowerCutReward struct {
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
}

func (m *MsgReceivePowerCutReward) Reset()         { *m = MsgReceivePowerCutReward{} }
func (m *MsgReceivePowerCutReward) String() string { return proto.CompactTextString(m) }
func (*MsgReceivePowerCutReward) ProtoMessage()    {}
func (*MsgReceivePowerCutReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{0}
}
func (m *MsgReceivePowerCutReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReceivePowerCutReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReceivePowerCutReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReceivePowerCutReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReceivePowerCutReward.Merge(m, src)
}
func (m *MsgReceivePowerCutReward) XXX_Size() int {
	return m.Size()
}
func (m *MsgReceivePowerCutReward) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReceivePowerCutReward.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReceivePowerCutReward proto.InternalMessageInfo

func (m *MsgReceivePowerCutReward) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

type MsgStartPowerRewardRedeem struct {
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
}

func (m *MsgStartPowerRewardRedeem) Reset()         { *m = MsgStartPowerRewardRedeem{} }
func (m *MsgStartPowerRewardRedeem) String() string { return proto.CompactTextString(m) }
func (*MsgStartPowerRewardRedeem) ProtoMessage()    {}
func (*MsgStartPowerRewardRedeem) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{1}
}
func (m *MsgStartPowerRewardRedeem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStartPowerRewardRedeem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStartPowerRewardRedeem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStartPowerRewardRedeem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStartPowerRewardRedeem.Merge(m, src)
}
func (m *MsgStartPowerRewardRedeem) XXX_Size() int {
	return m.Size()
}
func (m *MsgStartPowerRewardRedeem) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStartPowerRewardRedeem.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStartPowerRewardRedeem proto.InternalMessageInfo

func (m *MsgStartPowerRewardRedeem) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}


type MsgAgreeJoinClusterApply struct {
	FromAddress        string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
	ClusterId          string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" yaml:"cluster_id"`
	Sign               string `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty" yaml:"sign"`
	IndexNum           string `protobuf:"bytes,4,opt,name=index_num,json=indexNum,proto3" json:"index_num,omitempty" yaml:"index_num"`
	ChatAddress        string `protobuf:"bytes,5,opt,name=chat_address,json=chatAddress,proto3" json:"chat_address,omitempty" yaml:"chat_address"`
	MemberAddress      string `protobuf:"bytes,6,opt,name=member_address,json=memberAddress,proto3" json:"member_address,omitempty" yaml:"member_address"`
	MemberOnlineAmount int64  `protobuf:"varint,7,opt,name=member_online_amount,json=memberOnlineAmount,proto3" json:"member_online_amount,omitempty" yaml:"member_online_amount"`
	GatewayAddress     string `protobuf:"bytes,8,opt,name=gateway_address,json=gatewayAddress,proto3" json:"gateway_address,omitempty" yaml:"gateway_address"`
	GatewaySign        string `protobuf:"bytes,10,opt,name=gateway_sign,json=gatewaySign,proto3" json:"gateway_sign,omitempty" yaml:"gateway_sign"`
}

func (m *MsgAgreeJoinClusterApply) Reset()         { *m = MsgAgreeJoinClusterApply{} }
func (m *MsgAgreeJoinClusterApply) String() string { return proto.CompactTextString(m) }
func (*MsgAgreeJoinClusterApply) ProtoMessage()    {}
func (*MsgAgreeJoinClusterApply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{2}
}
func (m *MsgAgreeJoinClusterApply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAgreeJoinClusterApply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAgreeJoinClusterApply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAgreeJoinClusterApply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAgreeJoinClusterApply.Merge(m, src)
}
func (m *MsgAgreeJoinClusterApply) XXX_Size() int {
	return m.Size()
}
func (m *MsgAgreeJoinClusterApply) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAgreeJoinClusterApply.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAgreeJoinClusterApply proto.InternalMessageInfo

func (m *MsgAgreeJoinClusterApply) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgAgreeJoinClusterApply) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *MsgAgreeJoinClusterApply) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *MsgAgreeJoinClusterApply) GetIndexNum() string {
	if m != nil {
		return m.IndexNum
	}
	return ""
}

func (m *MsgAgreeJoinClusterApply) GetChatAddress() string {
	if m != nil {
		return m.ChatAddress
	}
	return ""
}

func (m *MsgAgreeJoinClusterApply) GetMemberAddress() string {
	if m != nil {
		return m.MemberAddress
	}
	return ""
}

func (m *MsgAgreeJoinClusterApply) GetMemberOnlineAmount() int64 {
	if m != nil {
		return m.MemberOnlineAmount
	}
	return 0
}

func (m *MsgAgreeJoinClusterApply) GetGatewayAddress() string {
	if m != nil {
		return m.GatewayAddress
	}
	return ""
}

func (m *MsgAgreeJoinClusterApply) GetGatewaySign() string {
	if m != nil {
		return m.GatewaySign
	}
	return ""
}


type MsgCreateClusterAddMembers struct {
	
	FromAddress string                                 `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
	GateAddress string                                 `protobuf:"bytes,2,opt,name=gate_address,json=gateAddress,proto3" json:"gate_address,omitempty" yaml:"gate_address"`
	ClusterId   string                                 `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" yaml:"cluster_id"`
	SalaryRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=salary_ratio,json=salaryRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"salary_ratio" yaml:"salary_ratio"`
	BurnAmount  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=burn_amount,json=burnAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"burn_amount" yaml:"burn_amount"`
	
	ChatAddress string `protobuf:"bytes,6,opt,name=chat_address,json=chatAddress,proto3" json:"chat_address,omitempty" yaml:"chat_address"`
	
	ClusterName string `protobuf:"bytes,7,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty" yaml:"cluster_name"`
	
	FreezeAmount github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=freeze_amount,json=freezeAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"freeze_amount" yaml:"freeze_amount"`
	
	Metadata        string                                 `protobuf:"bytes,9,opt,name=metadata,proto3" json:"metadata,omitempty" yaml:"metadata"`
	ClusterDaoRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,10,opt,name=cluster_dao_ratio,json=clusterDaoRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"cluster_dao_ratio" yaml:"cluster_dao_ratio"`
	
	
	Members            []Members `protobuf:"bytes,11,rep,name=members,proto3" json:"members" yaml:"members"`
	MemberOnlineAmount int64     `protobuf:"varint,12,opt,name=member_online_amount,json=memberOnlineAmount,proto3" json:"member_online_amount,omitempty" yaml:"member_online_amount"`
	
	OwnerIndexNum string `protobuf:"bytes,13,opt,name=owner_index_num,json=ownerIndexNum,proto3" json:"owner_index_num,omitempty" yaml:"owner_index_num"`
	
	GatewaySign string `protobuf:"bytes,14,opt,name=gateway_sign,json=gatewaySign,proto3" json:"gateway_sign,omitempty" yaml:"gateway_sign"`
}

func (m *MsgCreateClusterAddMembers) Reset()         { *m = MsgCreateClusterAddMembers{} }
func (m *MsgCreateClusterAddMembers) String() string { return proto.CompactTextString(m) }
func (*MsgCreateClusterAddMembers) ProtoMessage()    {}
func (*MsgCreateClusterAddMembers) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{3}
}
func (m *MsgCreateClusterAddMembers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateClusterAddMembers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateClusterAddMembers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateClusterAddMembers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateClusterAddMembers.Merge(m, src)
}
func (m *MsgCreateClusterAddMembers) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateClusterAddMembers) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateClusterAddMembers.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateClusterAddMembers proto.InternalMessageInfo

func (m *MsgCreateClusterAddMembers) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgCreateClusterAddMembers) GetGateAddress() string {
	if m != nil {
		return m.GateAddress
	}
	return ""
}

func (m *MsgCreateClusterAddMembers) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *MsgCreateClusterAddMembers) GetChatAddress() string {
	if m != nil {
		return m.ChatAddress
	}
	return ""
}

func (m *MsgCreateClusterAddMembers) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *MsgCreateClusterAddMembers) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

func (m *MsgCreateClusterAddMembers) GetMembers() []Members {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *MsgCreateClusterAddMembers) GetMemberOnlineAmount() int64 {
	if m != nil {
		return m.MemberOnlineAmount
	}
	return 0
}

func (m *MsgCreateClusterAddMembers) GetOwnerIndexNum() string {
	if m != nil {
		return m.OwnerIndexNum
	}
	return ""
}

func (m *MsgCreateClusterAddMembers) GetGatewaySign() string {
	if m != nil {
		return m.GatewaySign
	}
	return ""
}


type MsgReturnRedPacket struct {
	
	Fromaddress string `protobuf:"bytes,1,opt,name=fromaddress,proto3" json:"fromaddress,omitempty" yaml:"fromaddress"`
	
	Redpacketid string `protobuf:"bytes,2,opt,name=redpacketid,proto3" json:"redpacketid,omitempty" yaml:"redpacketid"`
}

func (m *MsgReturnRedPacket) Reset()         { *m = MsgReturnRedPacket{} }
func (m *MsgReturnRedPacket) String() string { return proto.CompactTextString(m) }
func (*MsgReturnRedPacket) ProtoMessage()    {}
func (*MsgReturnRedPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{4}
}
func (m *MsgReturnRedPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReturnRedPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReturnRedPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReturnRedPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReturnRedPacket.Merge(m, src)
}
func (m *MsgReturnRedPacket) XXX_Size() int {
	return m.Size()
}
func (m *MsgReturnRedPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReturnRedPacket.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReturnRedPacket proto.InternalMessageInfo

func (m *MsgReturnRedPacket) GetFromaddress() string {
	if m != nil {
		return m.Fromaddress
	}
	return ""
}

func (m *MsgReturnRedPacket) GetRedpacketid() string {
	if m != nil {
		return m.Redpacketid
	}
	return ""
}


type MsgOpenRedPacket struct {
	
	Fromaddress string `protobuf:"bytes,1,opt,name=fromaddress,proto3" json:"fromaddress,omitempty" yaml:"fromaddress"`
	
	Redpacketid string `protobuf:"bytes,2,opt,name=redpacketid,proto3" json:"redpacketid,omitempty" yaml:"redpacketid"`
}

func (m *MsgOpenRedPacket) Reset()         { *m = MsgOpenRedPacket{} }
func (m *MsgOpenRedPacket) String() string { return proto.CompactTextString(m) }
func (*MsgOpenRedPacket) ProtoMessage()    {}
func (*MsgOpenRedPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{5}
}
func (m *MsgOpenRedPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOpenRedPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOpenRedPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOpenRedPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOpenRedPacket.Merge(m, src)
}
func (m *MsgOpenRedPacket) XXX_Size() int {
	return m.Size()
}
func (m *MsgOpenRedPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOpenRedPacket.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOpenRedPacket proto.InternalMessageInfo

func (m *MsgOpenRedPacket) GetFromaddress() string {
	if m != nil {
		return m.Fromaddress
	}
	return ""
}

func (m *MsgOpenRedPacket) GetRedpacketid() string {
	if m != nil {
		return m.Redpacketid
	}
	return ""
}


type MsgRedPacketResponse struct {
	Clusterid string `protobuf:"bytes,2,opt,name=clusterid,proto3" json:"clusterid,omitempty" yaml:"clusterid"`
}

func (m *MsgRedPacketResponse) Reset()         { *m = MsgRedPacketResponse{} }
func (m *MsgRedPacketResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRedPacketResponse) ProtoMessage()    {}
func (*MsgRedPacketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{6}
}
func (m *MsgRedPacketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRedPacketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRedPacketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRedPacketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRedPacketResponse.Merge(m, src)
}
func (m *MsgRedPacketResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRedPacketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRedPacketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRedPacketResponse proto.InternalMessageInfo

func (m *MsgRedPacketResponse) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}


type MsgRedPacket struct {
	Fromaddress string     `protobuf:"bytes,1,opt,name=fromaddress,proto3" json:"fromaddress,omitempty" yaml:"fromaddress"`
	Clusterid   string     `protobuf:"bytes,2,opt,name=clusterid,proto3" json:"clusterid,omitempty" yaml:"clusterid"`
	Amount      types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount" yaml:"amount"`
	Count       int64      `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty" yaml:"count"`
	
	Redtype int64 `protobuf:"varint,5,opt,name=redtype,proto3" json:"redtype,omitempty" yaml:"redtype"`
}

func (m *MsgRedPacket) Reset()         { *m = MsgRedPacket{} }
func (m *MsgRedPacket) String() string { return proto.CompactTextString(m) }
func (*MsgRedPacket) ProtoMessage()    {}
func (*MsgRedPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{7}
}
func (m *MsgRedPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRedPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRedPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRedPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRedPacket.Merge(m, src)
}
func (m *MsgRedPacket) XXX_Size() int {
	return m.Size()
}
func (m *MsgRedPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRedPacket.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRedPacket proto.InternalMessageInfo

func (m *MsgRedPacket) GetFromaddress() string {
	if m != nil {
		return m.Fromaddress
	}
	return ""
}

func (m *MsgRedPacket) GetClusterid() string {
	if m != nil {
		return m.Clusterid
	}
	return ""
}

func (m *MsgRedPacket) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *MsgRedPacket) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *MsgRedPacket) GetRedtype() int64 {
	if m != nil {
		return m.Redtype
	}
	return 0
}


type MsgAgreeJoinCluster struct {
	FromAddress        string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
	ClusterId          string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" yaml:"cluster_id"`
	Sign               string `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty" yaml:"sign"`
	IndexNum           string `protobuf:"bytes,4,opt,name=index_num,json=indexNum,proto3" json:"index_num,omitempty" yaml:"index_num"`
	ChatAddress        string `protobuf:"bytes,5,opt,name=chat_address,json=chatAddress,proto3" json:"chat_address,omitempty" yaml:"chat_address"`
	MemberOnlineAmount int64  `protobuf:"varint,6,opt,name=member_online_amount,json=memberOnlineAmount,proto3" json:"member_online_amount,omitempty" yaml:"member_online_amount"`
	GatewayAddress     string `protobuf:"bytes,7,opt,name=gateway_address,json=gatewayAddress,proto3" json:"gateway_address,omitempty" yaml:"gateway_address"`
	
	GatewaySign string `protobuf:"bytes,8,opt,name=gateway_sign,json=gatewaySign,proto3" json:"gateway_sign,omitempty" yaml:"gateway_sign"`
}

func (m *MsgAgreeJoinCluster) Reset()         { *m = MsgAgreeJoinCluster{} }
func (m *MsgAgreeJoinCluster) String() string { return proto.CompactTextString(m) }
func (*MsgAgreeJoinCluster) ProtoMessage()    {}
func (*MsgAgreeJoinCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{8}
}
func (m *MsgAgreeJoinCluster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAgreeJoinCluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAgreeJoinCluster.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAgreeJoinCluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAgreeJoinCluster.Merge(m, src)
}
func (m *MsgAgreeJoinCluster) XXX_Size() int {
	return m.Size()
}
func (m *MsgAgreeJoinCluster) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAgreeJoinCluster.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAgreeJoinCluster proto.InternalMessageInfo

func (m *MsgAgreeJoinCluster) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgAgreeJoinCluster) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *MsgAgreeJoinCluster) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *MsgAgreeJoinCluster) GetIndexNum() string {
	if m != nil {
		return m.IndexNum
	}
	return ""
}

func (m *MsgAgreeJoinCluster) GetChatAddress() string {
	if m != nil {
		return m.ChatAddress
	}
	return ""
}

func (m *MsgAgreeJoinCluster) GetMemberOnlineAmount() int64 {
	if m != nil {
		return m.MemberOnlineAmount
	}
	return 0
}

func (m *MsgAgreeJoinCluster) GetGatewayAddress() string {
	if m != nil {
		return m.GatewayAddress
	}
	return ""
}

func (m *MsgAgreeJoinCluster) GetGatewaySign() string {
	if m != nil {
		return m.GatewaySign
	}
	return ""
}

type MsgReceiveBurnRewardFee struct {
	FromAddress string                                 `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
	ClusterId   string                                 `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" yaml:"cluster_id"`
	Amount      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"amount" yaml:"amount"`
}

func (m *MsgReceiveBurnRewardFee) Reset()         { *m = MsgReceiveBurnRewardFee{} }
func (m *MsgReceiveBurnRewardFee) String() string { return proto.CompactTextString(m) }
func (*MsgReceiveBurnRewardFee) ProtoMessage()    {}
func (*MsgReceiveBurnRewardFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{9}
}
func (m *MsgReceiveBurnRewardFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReceiveBurnRewardFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReceiveBurnRewardFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReceiveBurnRewardFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReceiveBurnRewardFee.Merge(m, src)
}
func (m *MsgReceiveBurnRewardFee) XXX_Size() int {
	return m.Size()
}
func (m *MsgReceiveBurnRewardFee) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReceiveBurnRewardFee.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReceiveBurnRewardFee proto.InternalMessageInfo

func (m *MsgReceiveBurnRewardFee) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgReceiveBurnRewardFee) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}


type MsgClusterAd struct {
	FromAddress string   `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
	ClusterId   []string `protobuf:"bytes,2,rep,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" yaml:"cluster_id"`
	AdText      string   `protobuf:"bytes,3,opt,name=ad_text,json=adText,proto3" json:"ad_text,omitempty" yaml:"ad_text"`
}

func (m *MsgClusterAd) Reset()         { *m = MsgClusterAd{} }
func (m *MsgClusterAd) String() string { return proto.CompactTextString(m) }
func (*MsgClusterAd) ProtoMessage()    {}
func (*MsgClusterAd) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{10}
}
func (m *MsgClusterAd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClusterAd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClusterAd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClusterAd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClusterAd.Merge(m, src)
}
func (m *MsgClusterAd) XXX_Size() int {
	return m.Size()
}
func (m *MsgClusterAd) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClusterAd.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClusterAd proto.InternalMessageInfo

func (m *MsgClusterAd) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgClusterAd) GetClusterId() []string {
	if m != nil {
		return m.ClusterId
	}
	return nil
}

func (m *MsgClusterAd) GetAdText() string {
	if m != nil {
		return m.AdText
	}
	return ""
}

type MsgUpdateAdmin struct {
	FromAddress      string   `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
	ClusterId        string   `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" yaml:"cluster_id"`
	ClusterAdminList []string `protobuf:"bytes,3,rep,name=cluster_admin_list,json=clusterAdminList,proto3" json:"cluster_admin_list,omitempty" yaml:"cluster_admin_list"`
}

func (m *MsgUpdateAdmin) Reset()         { *m = MsgUpdateAdmin{} }
func (m *MsgUpdateAdmin) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAdmin) ProtoMessage()    {}
func (*MsgUpdateAdmin) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{11}
}
func (m *MsgUpdateAdmin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAdmin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAdmin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAdmin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAdmin.Merge(m, src)
}
func (m *MsgUpdateAdmin) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAdmin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAdmin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAdmin proto.InternalMessageInfo

func (m *MsgUpdateAdmin) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgUpdateAdmin) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *MsgUpdateAdmin) GetClusterAdminList() []string {
	if m != nil {
		return m.ClusterAdminList
	}
	return nil
}


type MsgClusterChangeName struct {
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
	ClusterId   string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" yaml:"cluster_id"`
	ClusterName string `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty" yaml:"cluster_name"`
}

func (m *MsgClusterChangeName) Reset()         { *m = MsgClusterChangeName{} }
func (m *MsgClusterChangeName) String() string { return proto.CompactTextString(m) }
func (*MsgClusterChangeName) ProtoMessage()    {}
func (*MsgClusterChangeName) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{12}
}
func (m *MsgClusterChangeName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClusterChangeName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClusterChangeName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClusterChangeName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClusterChangeName.Merge(m, src)
}
func (m *MsgClusterChangeName) XXX_Size() int {
	return m.Size()
}
func (m *MsgClusterChangeName) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClusterChangeName.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClusterChangeName proto.InternalMessageInfo

func (m *MsgClusterChangeName) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgClusterChangeName) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *MsgClusterChangeName) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

type MsgClusterMemberExit struct {
	FromAddress        string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
	ClusterId          string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" yaml:"cluster_id"`
	MemberOnlineAmount int64  `protobuf:"varint,3,opt,name=member_online_amount,json=memberOnlineAmount,proto3" json:"member_online_amount,omitempty" yaml:"member_online_amount"`
	GatewayAddress     string `protobuf:"bytes,4,opt,name=gateway_address,json=gatewayAddress,proto3" json:"gateway_address,omitempty" yaml:"gateway_address"`
	GatewaySign        string `protobuf:"bytes,5,opt,name=gateway_sign,json=gatewaySign,proto3" json:"gateway_sign,omitempty" yaml:"gateway_sign"`
}

func (m *MsgClusterMemberExit) Reset()         { *m = MsgClusterMemberExit{} }
func (m *MsgClusterMemberExit) String() string { return proto.CompactTextString(m) }
func (*MsgClusterMemberExit) ProtoMessage()    {}
func (*MsgClusterMemberExit) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{13}
}
func (m *MsgClusterMemberExit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClusterMemberExit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClusterMemberExit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClusterMemberExit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClusterMemberExit.Merge(m, src)
}
func (m *MsgClusterMemberExit) XXX_Size() int {
	return m.Size()
}
func (m *MsgClusterMemberExit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClusterMemberExit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClusterMemberExit proto.InternalMessageInfo


type MsgThawFrozenPower struct {
	FromAddress string                                 `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
	ClusterId   string                                 `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" yaml:"cluster_id"`
	ThawAmount  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=thaw_amount,json=thawAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"thaw_amount" yaml:"thaw_amount"`
	
	GatewayAddress string `protobuf:"bytes,4,opt,name=gateway_address,json=gatewayAddress,proto3" json:"gateway_address,omitempty" yaml:"node_address"`
	
	ChatAddress string `protobuf:"bytes,5,opt,name=chat_address,json=chatAddress,proto3" json:"chat_address,omitempty" yaml:"chat_address"`
}

func (m *MsgThawFrozenPower) Reset()         { *m = MsgThawFrozenPower{} }
func (m *MsgThawFrozenPower) String() string { return proto.CompactTextString(m) }
func (*MsgThawFrozenPower) ProtoMessage()    {}
func (*MsgThawFrozenPower) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{14}
}
func (m *MsgThawFrozenPower) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgThawFrozenPower) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgThawFrozenPower.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgThawFrozenPower) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgThawFrozenPower.Merge(m, src)
}
func (m *MsgThawFrozenPower) XXX_Size() int {
	return m.Size()
}
func (m *MsgThawFrozenPower) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgThawFrozenPower.DiscardUnknown(m)
}

var xxx_messageInfo_MsgThawFrozenPower proto.InternalMessageInfo


type MsgDeleteMembers struct {
	FromAddress        string   `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
	ClusterId          string   `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" yaml:"cluster_id"`
	Members            []string `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty" yaml:"members"`
	MemberOnlineAmount int64    `protobuf:"varint,4,opt,name=member_online_amount,json=memberOnlineAmount,proto3" json:"member_online_amount,omitempty" yaml:"member_online_amount"`
	GatewayAddress     string   `protobuf:"bytes,5,opt,name=gateway_address,json=gatewayAddress,proto3" json:"gateway_address,omitempty" yaml:"gateway_address"`
	GatewaySign        string   `protobuf:"bytes,6,opt,name=gateway_sign,json=gatewaySign,proto3" json:"gateway_sign,omitempty" yaml:"gateway_sign"`
}

func (m *MsgDeleteMembers) Reset()         { *m = MsgDeleteMembers{} }
func (m *MsgDeleteMembers) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteMembers) ProtoMessage()    {}
func (*MsgDeleteMembers) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{15}
}
func (m *MsgDeleteMembers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteMembers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteMembers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteMembers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteMembers.Merge(m, src)
}
func (m *MsgDeleteMembers) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteMembers) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteMembers.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteMembers proto.InternalMessageInfo


type MsgWithdrawOwnerReward struct {
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Address   string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *MsgWithdrawOwnerReward) Reset()         { *m = MsgWithdrawOwnerReward{} }
func (m *MsgWithdrawOwnerReward) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawOwnerReward) ProtoMessage()    {}
func (*MsgWithdrawOwnerReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{16}
}
func (m *MsgWithdrawOwnerReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawOwnerReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawOwnerReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawOwnerReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawOwnerReward.Merge(m, src)
}
func (m *MsgWithdrawOwnerReward) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawOwnerReward) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawOwnerReward.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawOwnerReward proto.InternalMessageInfo

type MsgWithdrawSwapDpos struct {
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	MemberAddress string `protobuf:"bytes,2,opt,name=member_address,json=memberAddress,proto3" json:"member_address,omitempty"`
	DaoNum        string `protobuf:"bytes,3,opt,name=dao_num,json=daoNum,proto3" json:"dao_num,omitempty"`
}

func (m *MsgWithdrawSwapDpos) Reset()         { *m = MsgWithdrawSwapDpos{} }
func (m *MsgWithdrawSwapDpos) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawSwapDpos) ProtoMessage()    {}
func (*MsgWithdrawSwapDpos) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{17}
}
func (m *MsgWithdrawSwapDpos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawSwapDpos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawSwapDpos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawSwapDpos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawSwapDpos.Merge(m, src)
}
func (m *MsgWithdrawSwapDpos) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawSwapDpos) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawSwapDpos.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawSwapDpos proto.InternalMessageInfo


type MsgWithdrawDeviceReward struct {
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	MemberAddress string `protobuf:"bytes,2,opt,name=member_address,json=memberAddress,proto3" json:"member_address,omitempty"`
}

func (m *MsgWithdrawDeviceReward) Reset()         { *m = MsgWithdrawDeviceReward{} }
func (m *MsgWithdrawDeviceReward) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawDeviceReward) ProtoMessage()    {}
func (*MsgWithdrawDeviceReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{18}
}
func (m *MsgWithdrawDeviceReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawDeviceReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawDeviceReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawDeviceReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawDeviceReward.Merge(m, src)
}
func (m *MsgWithdrawDeviceReward) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawDeviceReward) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawDeviceReward.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawDeviceReward proto.InternalMessageInfo


type MsgColonyRate struct {
	Address        string       `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	GatewayAddress string       `protobuf:"bytes,2,opt,name=gateway_address,json=gatewayAddress,proto3" json:"gateway_address,omitempty"`
	OnlineRate     []ColonyRate `protobuf:"bytes,3,rep,name=online_rate,json=onlineRate,proto3" json:"online_rate"`
}

func (m *MsgColonyRate) Reset()         { *m = MsgColonyRate{} }
func (m *MsgColonyRate) String() string { return proto.CompactTextString(m) }
func (*MsgColonyRate) ProtoMessage()    {}
func (*MsgColonyRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{19}
}
func (m *MsgColonyRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgColonyRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgColonyRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgColonyRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgColonyRate.Merge(m, src)
}
func (m *MsgColonyRate) XXX_Size() int {
	return m.Size()
}
func (m *MsgColonyRate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgColonyRate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgColonyRate proto.InternalMessageInfo

func (m *MsgColonyRate) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgColonyRate) GetGatewayAddress() string {
	if m != nil {
		return m.GatewayAddress
	}
	return ""
}

func (m *MsgColonyRate) GetOnlineRate() []ColonyRate {
	if m != nil {
		return m.OnlineRate
	}
	return nil
}

type ColonyRate struct {
	
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	
	Rate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=rate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"rate"`
}

func (m *ColonyRate) Reset()         { *m = ColonyRate{} }
func (m *ColonyRate) String() string { return proto.CompactTextString(m) }
func (*ColonyRate) ProtoMessage()    {}
func (*ColonyRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{20}
}
func (m *ColonyRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ColonyRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ColonyRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ColonyRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColonyRate.Merge(m, src)
}
func (m *ColonyRate) XXX_Size() int {
	return m.Size()
}
func (m *ColonyRate) XXX_DiscardUnknown() {
	xxx_messageInfo_ColonyRate.DiscardUnknown(m)
}

var xxx_messageInfo_ColonyRate proto.InternalMessageInfo

func (m *ColonyRate) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}


type MsgCreateCluster struct {
	FromAddress string                                 `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
	GateAddress string                                 `protobuf:"bytes,2,opt,name=gate_address,json=gateAddress,proto3" json:"gate_address,omitempty" yaml:"gate_address"`
	ClusterId   string                                 `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" yaml:"cluster_id"`
	SalaryRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=salary_ratio,json=salaryRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"salary_ratio" yaml:"salary_ratio"`
	BurnAmount  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=burn_amount,json=burnAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"burn_amount" yaml:"burn_amount"`
	
	ChatAddress string `protobuf:"bytes,6,opt,name=chat_address,json=chatAddress,proto3" json:"chat_address,omitempty" yaml:"chat_address"`
	
	ClusterName string `protobuf:"bytes,7,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty" yaml:"cluster_name"`
	
	FreezeAmount github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=freeze_amount,json=freezeAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"freeze_amount" yaml:"freeze_amount"`
	
	Metadata        string                                 `protobuf:"bytes,9,opt,name=metadata,proto3" json:"metadata,omitempty" yaml:"metadata"`
	ClusterDaoRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,10,opt,name=cluster_dao_ratio,json=clusterDaoRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"cluster_dao_ratio" yaml:"cluster_dao_ratio"`
}

func (m *MsgCreateCluster) Reset()         { *m = MsgCreateCluster{} }
func (m *MsgCreateCluster) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCluster) ProtoMessage()    {}
func (*MsgCreateCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{21}
}
func (m *MsgCreateCluster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCluster.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCluster.Merge(m, src)
}
func (m *MsgCreateCluster) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCluster) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCluster.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCluster proto.InternalMessageInfo

func (m *MsgCreateCluster) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgCreateCluster) GetGateAddress() string {
	if m != nil {
		return m.GateAddress
	}
	return ""
}

func (m *MsgCreateCluster) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *MsgCreateCluster) GetChatAddress() string {
	if m != nil {
		return m.ChatAddress
	}
	return ""
}

func (m *MsgCreateCluster) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *MsgCreateCluster) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}


type MsgClusterAddMembers struct {
	FromAddress string    `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
	ClusterId   string    `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" yaml:"cluster_id"`
	Members     []Members `protobuf:"bytes,3,rep,name=members,proto3" json:"members" yaml:"members"`
}

func (m *MsgClusterAddMembers) Reset()         { *m = MsgClusterAddMembers{} }
func (m *MsgClusterAddMembers) String() string { return proto.CompactTextString(m) }
func (*MsgClusterAddMembers) ProtoMessage()    {}
func (*MsgClusterAddMembers) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{22}
}
func (m *MsgClusterAddMembers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClusterAddMembers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClusterAddMembers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClusterAddMembers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClusterAddMembers.Merge(m, src)
}
func (m *MsgClusterAddMembers) XXX_Size() int {
	return m.Size()
}
func (m *MsgClusterAddMembers) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClusterAddMembers.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClusterAddMembers proto.InternalMessageInfo

func (m *MsgClusterAddMembers) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgClusterAddMembers) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *MsgClusterAddMembers) GetMembers() []Members {
	if m != nil {
		return m.Members
	}
	return nil
}

type Members struct {
	MemberAddress string `protobuf:"bytes,1,opt,name=member_address,json=memberAddress,proto3" json:"member_address,omitempty" yaml:"from_address"`
	IndexNum      string `protobuf:"bytes,2,opt,name=index_num,json=indexNum,proto3" json:"index_num,omitempty" yaml:"index_num"`
	ChatAddress   string `protobuf:"bytes,3,opt,name=chat_address,json=chatAddress,proto3" json:"chat_address,omitempty" yaml:"chat_address"`
}

func (m *Members) Reset()         { *m = Members{} }
func (m *Members) String() string { return proto.CompactTextString(m) }
func (*Members) ProtoMessage()    {}
func (*Members) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{23}
}
func (m *Members) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Members) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Members.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Members) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Members.Merge(m, src)
}
func (m *Members) XXX_Size() int {
	return m.Size()
}
func (m *Members) XXX_DiscardUnknown() {
	xxx_messageInfo_Members.DiscardUnknown(m)
}

var xxx_messageInfo_Members proto.InternalMessageInfo

func (m *Members) GetMemberAddress() string {
	if m != nil {
		return m.MemberAddress
	}
	return ""
}

func (m *Members) GetIndexNum() string {
	if m != nil {
		return m.IndexNum
	}
	return ""
}

func (m *Members) GetChatAddress() string {
	if m != nil {
		return m.ChatAddress
	}
	return ""
}


type MsgBurnToPower struct {
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
	ToAddress   string `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty" yaml:"to_address"`
	
	ClusterId string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" yaml:"cluster_id"`
	
	BurnAmount      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=burn_amount,json=burnAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"burn_amount" yaml:"burn_amount"`
	UseFreezeAmount github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=use_freeze_amount,json=useFreezeAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"use_freeze_amount" yaml:"use_freeze_amount"`
	
	GatewayAddress string `protobuf:"bytes,6,opt,name=gateway_address,json=gatewayAddress,proto3" json:"gateway_address,omitempty" yaml:"gateway_address"`
	
	ChatAddress string `protobuf:"bytes,7,opt,name=chat_address,json=chatAddress,proto3" json:"chat_address,omitempty" yaml:"chat_address"`
}

func (m *MsgBurnToPower) Reset()         { *m = MsgBurnToPower{} }
func (m *MsgBurnToPower) String() string { return proto.CompactTextString(m) }
func (*MsgBurnToPower) ProtoMessage()    {}
func (*MsgBurnToPower) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{24}
}
func (m *MsgBurnToPower) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnToPower) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnToPower.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnToPower) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnToPower.Merge(m, src)
}
func (m *MsgBurnToPower) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnToPower) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnToPower.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnToPower proto.InternalMessageInfo

func (m *MsgBurnToPower) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgBurnToPower) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *MsgBurnToPower) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *MsgBurnToPower) GetGatewayAddress() string {
	if m != nil {
		return m.GatewayAddress
	}
	return ""
}

func (m *MsgBurnToPower) GetChatAddress() string {
	if m != nil {
		return m.ChatAddress
	}
	return ""
}


type MsgClusterChangeSalaryRatio struct {
	FromAddress string                                 `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
	ClusterId   string                                 `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" yaml:"cluster_id"`
	SalaryRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=salary_ratio,json=salaryRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"salary_ratio" yaml:"salary_ratio"`
}

func (m *MsgClusterChangeSalaryRatio) Reset()         { *m = MsgClusterChangeSalaryRatio{} }
func (m *MsgClusterChangeSalaryRatio) String() string { return proto.CompactTextString(m) }
func (*MsgClusterChangeSalaryRatio) ProtoMessage()    {}
func (*MsgClusterChangeSalaryRatio) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{25}
}
func (m *MsgClusterChangeSalaryRatio) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClusterChangeSalaryRatio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClusterChangeSalaryRatio.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClusterChangeSalaryRatio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClusterChangeSalaryRatio.Merge(m, src)
}
func (m *MsgClusterChangeSalaryRatio) XXX_Size() int {
	return m.Size()
}
func (m *MsgClusterChangeSalaryRatio) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClusterChangeSalaryRatio.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClusterChangeSalaryRatio proto.InternalMessageInfo

func (m *MsgClusterChangeSalaryRatio) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgClusterChangeSalaryRatio) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type MsgClusterChangeDvmRatio struct {
	FromAddress string                                 `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
	ClusterId   string                                 `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" yaml:"cluster_id"`
	DvmRatio    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=dvm_ratio,json=dvmRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"dvm_ratio" yaml:"dvm_ratio"`
}

func (m *MsgClusterChangeDvmRatio) Reset()         { *m = MsgClusterChangeDvmRatio{} }
func (m *MsgClusterChangeDvmRatio) String() string { return proto.CompactTextString(m) }
func (*MsgClusterChangeDvmRatio) ProtoMessage()    {}
func (*MsgClusterChangeDvmRatio) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{26}
}
func (m *MsgClusterChangeDvmRatio) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClusterChangeDvmRatio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClusterChangeDvmRatio.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClusterChangeDvmRatio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClusterChangeDvmRatio.Merge(m, src)
}
func (m *MsgClusterChangeDvmRatio) XXX_Size() int {
	return m.Size()
}
func (m *MsgClusterChangeDvmRatio) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClusterChangeDvmRatio.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClusterChangeDvmRatio proto.InternalMessageInfo

func (m *MsgClusterChangeDvmRatio) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgClusterChangeDvmRatio) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type MsgClusterChangeDaoRatio struct {
	FromAddress string                                 `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
	ClusterId   string                                 `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" yaml:"cluster_id"`
	DaoRatio    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=dao_ratio,json=daoRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"dao_ratio" yaml:"dao_ratio"`
}

func (m *MsgClusterChangeDaoRatio) Reset()         { *m = MsgClusterChangeDaoRatio{} }
func (m *MsgClusterChangeDaoRatio) String() string { return proto.CompactTextString(m) }
func (*MsgClusterChangeDaoRatio) ProtoMessage()    {}
func (*MsgClusterChangeDaoRatio) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{27}
}
func (m *MsgClusterChangeDaoRatio) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClusterChangeDaoRatio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClusterChangeDaoRatio.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClusterChangeDaoRatio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClusterChangeDaoRatio.Merge(m, src)
}
func (m *MsgClusterChangeDaoRatio) XXX_Size() int {
	return m.Size()
}
func (m *MsgClusterChangeDaoRatio) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClusterChangeDaoRatio.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClusterChangeDaoRatio proto.InternalMessageInfo

func (m *MsgClusterChangeDaoRatio) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgClusterChangeDaoRatio) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type MsgClusterChangeId struct {
	FromAddress  string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
	ClusterId    string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" yaml:"cluster_id"`
	NewClusterId string `protobuf:"bytes,3,opt,name=new_cluster_id,json=newClusterId,proto3" json:"new_cluster_id,omitempty" yaml:"new_cluster_id"`
}

func (m *MsgClusterChangeId) Reset()         { *m = MsgClusterChangeId{} }
func (m *MsgClusterChangeId) String() string { return proto.CompactTextString(m) }
func (*MsgClusterChangeId) ProtoMessage()    {}
func (*MsgClusterChangeId) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{28}
}
func (m *MsgClusterChangeId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClusterChangeId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClusterChangeId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClusterChangeId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClusterChangeId.Merge(m, src)
}
func (m *MsgClusterChangeId) XXX_Size() int {
	return m.Size()
}
func (m *MsgClusterChangeId) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClusterChangeId.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClusterChangeId proto.InternalMessageInfo

func (m *MsgClusterChangeId) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgClusterChangeId) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *MsgClusterChangeId) GetNewClusterId() string {
	if m != nil {
		return m.NewClusterId
	}
	return ""
}

type MsgClusterPowerApprove struct {
	ApproveAddress  string `protobuf:"bytes,1,opt,name=approve_address,json=approveAddress,proto3" json:"approve_address,omitempty" yaml:"approve_address"`
	ClusterId       string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" yaml:"cluster_id"`
	ApproveEndBlock string `protobuf:"bytes,3,opt,name=approve_end_block,json=approveEndBlock,proto3" json:"approve_end_block,omitempty" yaml:"approve_end_Block"`
	FromAddress     string `protobuf:"bytes,4,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
}

func (m *MsgClusterPowerApprove) Reset()         { *m = MsgClusterPowerApprove{} }
func (m *MsgClusterPowerApprove) String() string { return proto.CompactTextString(m) }
func (*MsgClusterPowerApprove) ProtoMessage()    {}
func (*MsgClusterPowerApprove) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{29}
}
func (m *MsgClusterPowerApprove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClusterPowerApprove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClusterPowerApprove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClusterPowerApprove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClusterPowerApprove.Merge(m, src)
}
func (m *MsgClusterPowerApprove) XXX_Size() int {
	return m.Size()
}
func (m *MsgClusterPowerApprove) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClusterPowerApprove.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClusterPowerApprove proto.InternalMessageInfo

func (m *MsgClusterPowerApprove) GetApproveAddress() string {
	if m != nil {
		return m.ApproveAddress
	}
	return ""
}

func (m *MsgClusterPowerApprove) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *MsgClusterPowerApprove) GetApproveEndBlock() string {
	if m != nil {
		return m.ApproveEndBlock
	}
	return ""
}

func (m *MsgClusterPowerApprove) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

type MsgPersonDvmApprove struct {
	ApproveAddress  string `protobuf:"bytes,1,opt,name=approve_address,json=approveAddress,proto3" json:"approve_address,omitempty" yaml:"approve_address"`
	ClusterId       string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" yaml:"cluster_id"`
	ApproveEndBlock string `protobuf:"bytes,3,opt,name=approve_end_block,json=approveEndBlock,proto3" json:"approve_end_block,omitempty" yaml:"approve_end_Block"`
	FromAddress     string `protobuf:"bytes,4,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
}

func (m *MsgPersonDvmApprove) Reset()         { *m = MsgPersonDvmApprove{} }
func (m *MsgPersonDvmApprove) String() string { return proto.CompactTextString(m) }
func (*MsgPersonDvmApprove) ProtoMessage()    {}
func (*MsgPersonDvmApprove) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{30}
}
func (m *MsgPersonDvmApprove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPersonDvmApprove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPersonDvmApprove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPersonDvmApprove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPersonDvmApprove.Merge(m, src)
}
func (m *MsgPersonDvmApprove) XXX_Size() int {
	return m.Size()
}
func (m *MsgPersonDvmApprove) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPersonDvmApprove.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPersonDvmApprove proto.InternalMessageInfo

func (m *MsgPersonDvmApprove) GetApproveAddress() string {
	if m != nil {
		return m.ApproveAddress
	}
	return ""
}

func (m *MsgPersonDvmApprove) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *MsgPersonDvmApprove) GetApproveEndBlock() string {
	if m != nil {
		return m.ApproveEndBlock
	}
	return ""
}

func (m *MsgPersonDvmApprove) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

type MsgEmptyResponse struct {
}

func (m *MsgEmptyResponse) Reset()         { *m = MsgEmptyResponse{} }
func (m *MsgEmptyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEmptyResponse) ProtoMessage()    {}
func (*MsgEmptyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{31}
}
func (m *MsgEmptyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEmptyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEmptyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEmptyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEmptyResponse.Merge(m, src)
}
func (m *MsgEmptyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEmptyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEmptyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEmptyResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgReceivePowerCutReward)(nil), "freemasonry.dao.v1.MsgReceivePowerCutReward")
	proto.RegisterType((*MsgStartPowerRewardRedeem)(nil), "freemasonry.dao.v1.MsgStartPowerRewardRedeem")
	proto.RegisterType((*MsgAgreeJoinClusterApply)(nil), "freemasonry.dao.v1.MsgAgreeJoinClusterApply")
	proto.RegisterType((*MsgCreateClusterAddMembers)(nil), "freemasonry.dao.v1.MsgCreateClusterAddMembers")
	proto.RegisterType((*MsgReturnRedPacket)(nil), "freemasonry.dao.v1.MsgReturnRedPacket")
	proto.RegisterType((*MsgOpenRedPacket)(nil), "freemasonry.dao.v1.MsgOpenRedPacket")
	proto.RegisterType((*MsgRedPacketResponse)(nil), "freemasonry.dao.v1.MsgRedPacketResponse")
	proto.RegisterType((*MsgRedPacket)(nil), "freemasonry.dao.v1.MsgRedPacket")
	proto.RegisterType((*MsgAgreeJoinCluster)(nil), "freemasonry.dao.v1.MsgAgreeJoinCluster")
	proto.RegisterType((*MsgReceiveBurnRewardFee)(nil), "freemasonry.dao.v1.MsgReceiveBurnRewardFee")
	proto.RegisterType((*MsgClusterAd)(nil), "freemasonry.dao.v1.MsgClusterAd")
	proto.RegisterType((*MsgUpdateAdmin)(nil), "freemasonry.dao.v1.MsgUpdateAdmin")
	proto.RegisterType((*MsgClusterChangeName)(nil), "freemasonry.dao.v1.MsgClusterChangeName")
	proto.RegisterType((*MsgClusterMemberExit)(nil), "freemasonry.dao.v1.MsgClusterMemberExit")
	proto.RegisterType((*MsgThawFrozenPower)(nil), "freemasonry.dao.v1.MsgThawFrozenPower")
	proto.RegisterType((*MsgDeleteMembers)(nil), "freemasonry.dao.v1.MsgDeleteMembers")
	proto.RegisterType((*MsgWithdrawOwnerReward)(nil), "freemasonry.dao.v1.MsgWithdrawOwnerReward")
	proto.RegisterType((*MsgWithdrawSwapDpos)(nil), "freemasonry.dao.v1.MsgWithdrawSwapDpos")
	proto.RegisterType((*MsgWithdrawDeviceReward)(nil), "freemasonry.dao.v1.MsgWithdrawDeviceReward")
	proto.RegisterType((*MsgColonyRate)(nil), "freemasonry.dao.v1.MsgColonyRate")
	proto.RegisterType((*ColonyRate)(nil), "freemasonry.dao.v1.ColonyRate")
	proto.RegisterType((*MsgCreateCluster)(nil), "freemasonry.dao.v1.MsgCreateCluster")
	proto.RegisterType((*MsgClusterAddMembers)(nil), "freemasonry.dao.v1.MsgClusterAddMembers")
	proto.RegisterType((*Members)(nil), "freemasonry.dao.v1.Members")
	proto.RegisterType((*MsgBurnToPower)(nil), "freemasonry.dao.v1.MsgBurnToPower")
	proto.RegisterType((*MsgClusterChangeSalaryRatio)(nil), "freemasonry.dao.v1.MsgClusterChangeSalaryRatio")
	proto.RegisterType((*MsgClusterChangeDvmRatio)(nil), "freemasonry.dao.v1.MsgClusterChangeDvmRatio")
	proto.RegisterType((*MsgClusterChangeDaoRatio)(nil), "freemasonry.dao.v1.MsgClusterChangeDaoRatio")
	proto.RegisterType((*MsgClusterChangeId)(nil), "freemasonry.dao.v1.MsgClusterChangeId")
	proto.RegisterType((*MsgClusterPowerApprove)(nil), "freemasonry.dao.v1.MsgClusterPowerApprove")
	proto.RegisterType((*MsgPersonDvmApprove)(nil), "freemasonry.dao.v1.MsgPersonDvmApprove")
	proto.RegisterType((*MsgEmptyResponse)(nil), "freemasonry.dao.v1.MsgEmptyResponse")
}

func init() { proto.RegisterFile("tx.proto", fileDescriptor_0fd2153dc07d3b5c) }

var fileDescriptor_0fd2153dc07d3b5c = []byte{
	
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0xcd, 0x6f, 0x23, 0x49,
	0x15, 0x4f, 0xc7, 0x8e, 0x13, 0x97, 0xf3, 0xd9, 0x93, 0x0f, 0x27, 0xc3, 0xc6, 0x43, 0xc1, 0xce,
	0x46, 0xbb, 0x59, 0x5b, 0x09, 0x1c, 0x50, 0x0e, 0xcc, 0xc6, 0x49, 0x46, 0x3b, 0x03, 0x9e, 0x19,
	0x2a, 0xb3, 0x8c, 0x04, 0x07, 0xab, 0xe2, 0xae, 0x75, 0x9a, 0xb8, 0xbb, 0x4d, 0x77, 0xdb, 0x4e,
	0x56, 0x9c, 0x38, 0xac, 0xf6, 0x08, 0x17, 0xc4, 0x48, 0x1c, 0x96, 0x3f, 0x00, 0x09, 0x71, 0x40,
	0xfc, 0x01, 0x48, 0xec, 0x8d, 0xbd, 0x81, 0x38, 0x58, 0x68, 0x06, 0x09, 0x2e, 0x08, 0xc9, 0x17,
	0xc4, 0x0d, 0xd5, 0x47, 0xdb, 0xd5, 0x6d, 0x77, 0x52, 0xb6, 0xb3, 0x9b, 0x4b, 0x4e, 0x76, 0x55,
	0xfd, 0xde, 0x57, 0xd5, 0x7b, 0xaf, 0x5e, 0x55, 0x17, 0x98, 0xf1, 0xcf, 0xf3, 0x75, 0xd7, 0xf1,
	0x1d, 0x5d, 0xff, 0xd0, 0x25, 0xc4, 0xc2, 0x9e, 0x63, 0xbb, 0x17, 0x79, 0x03, 0x3b, 0xf9, 0xe6,
	0xce, 0xc6, 0x72, 0xd5, 0xa9, 0x3a, 0x6c, 0xb8, 0x40, 0xff, 0x71, 0xe4, 0xc6, 0x5a, 0xc5, 0xf1,
	0x2c, 0xc7, 0x2b, 0x58, 0x5e, 0xb5, 0xd0, 0xdc, 0xa1, 0x3f, 0x62, 0x60, 0x53, 0x0c, 0x9c, 0x60,
	0x8f, 0x14, 0x9a, 0x3b, 0x27, 0xc4, 0xc7, 0x3b, 0x85, 0x8a, 0x63, 0xda, 0x7c, 0x1c, 0x7e, 0x1f,
	0x64, 0x4b, 0x5e, 0x15, 0x91, 0x0a, 0x31, 0x9b, 0xe4, 0x99, 0xd3, 0x22, 0xee, 0x41, 0xc3, 0x47,
	0xa4, 0x85, 0x5d, 0x43, 0xdf, 0x03, 0xb3, 0x1f, 0xba, 0x8e, 0x55, 0xc6, 0x86, 0xe1, 0x12, 0xcf,
	0xcb, 0x6a, 0xf7, 0xb4, 0xad, 0x74, 0x71, 0xad, 0xd3, 0xce, 0xdd, 0xb9, 0xc0, 0x56, 0x6d, 0x0f,
	0xca, 0xa3, 0x10, 0x65, 0x68, 0x73, 0x5f, 0xb4, 0x5e, 0x80, 0xf5, 0x92, 0x57, 0x3d, 0xf6, 0xb1,
	0xeb, 0x33, 0xae, 0x9c, 0x25, 0x22, 0x06, 0x21, 0xd6, 0x58, 0x8c, 0x7f, 0x9f, 0x64, 0x1a, 0xef,
	0x57, 0x5d, 0x42, 0x1e, 0x3b, 0xa6, 0x7d, 0x50, 0x6b, 0x78, 0x3e, 0x71, 0xf7, 0xeb, 0xf5, 0xda,
	0xc5, 0x38, 0x8c, 0xf5, 0x6f, 0x02, 0x50, 0xe1, 0xbc, 0xca, 0xa6, 0x91, 0x9d, 0x64, 0x94, 0x2b,
	0x9d, 0x76, 0x6e, 0x89, 0x53, 0xf6, 0xc6, 0x20, 0x4a, 0x8b, 0xc6, 0x23, 0x43, 0xff, 0x1a, 0x48,
	0x7a, 0x66, 0xd5, 0xce, 0x26, 0x18, 0x7e, 0xa1, 0xd3, 0xce, 0x65, 0x38, 0x9e, 0xf6, 0x42, 0xc4,
	0x06, 0xf5, 0x1d, 0x90, 0x36, 0x6d, 0x83, 0x9c, 0x97, 0xed, 0x86, 0x95, 0x4d, 0x32, 0xe4, 0x72,
	0xa7, 0x9d, 0x5b, 0xe4, 0xc8, 0xee, 0x10, 0x44, 0x33, 0xec, 0xff, 0x93, 0x06, 0x9b, 0xa2, 0xca,
	0x29, 0xf6, 0xbb, 0x96, 0x4c, 0x45, 0x2d, 0x91, 0x47, 0x21, 0xca, 0xd0, 0x66, 0x60, 0xc9, 0x7b,
	0x60, 0xde, 0x22, 0xd6, 0x09, 0x71, 0xbb, 0xd4, 0x29, 0x46, 0xbd, 0xde, 0x69, 0xe7, 0x56, 0x38,
	0x75, 0x78, 0x1c, 0xa2, 0x39, 0xde, 0x11, 0x70, 0xf8, 0x1e, 0x58, 0x16, 0x08, 0xc7, 0xae, 0x99,
	0x36, 0x29, 0x63, 0xcb, 0x69, 0xd8, 0x7e, 0x76, 0xfa, 0x9e, 0xb6, 0x95, 0x28, 0xe6, 0x3a, 0xed,
	0xdc, 0xdd, 0x10, 0x9f, 0x10, 0x0a, 0x22, 0x9d, 0x77, 0x3f, 0x65, 0xbd, 0xfb, 0xac, 0x53, 0x3f,
	0x00, 0x0b, 0x55, 0xec, 0x93, 0x16, 0xbe, 0xe8, 0x6a, 0x35, 0xc3, 0xb4, 0xda, 0xe8, 0xb4, 0x73,
	0xab, 0x9c, 0x5b, 0x04, 0x00, 0xd1, 0xbc, 0xe8, 0x09, 0xf4, 0xda, 0x03, 0xb3, 0x01, 0x86, 0xcd,
	0x3a, 0x88, 0xce, 0x8a, 0x3c, 0x0a, 0x51, 0x46, 0x34, 0x8f, 0x69, 0xab, 0x3d, 0x03, 0x36, 0x4a,
	0x5e, 0xf5, 0xc0, 0x25, 0xd8, 0x27, 0x81, 0xd7, 0x18, 0x46, 0x89, 0xa9, 0xea, 0x8d, 0xe5, 0x3a,
	0x42, 0xad, 0x2e, 0xed, 0xe4, 0x20, 0xb5, 0x24, 0x5a, 0xda, 0x1c, 0xec, 0x76, 0x09, 0x45, 0xb7,
	0x3b, 0x05, 0xb3, 0x1e, 0xae, 0x61, 0xf7, 0xa2, 0xec, 0x62, 0xdf, 0x74, 0x84, 0x53, 0x1d, 0x7d,
	0xd6, 0xce, 0x4d, 0xfc, 0xad, 0x9d, 0xbb, 0x5f, 0x35, 0xfd, 0xd3, 0xc6, 0x49, 0xbe, 0xe2, 0x58,
	0x05, 0x11, 0xff, 0xfc, 0xe7, 0x5d, 0xcf, 0x38, 0x2b, 0xf8, 0x17, 0x75, 0xe2, 0xe5, 0x0f, 0x49,
	0xa5, 0xa7, 0x9f, 0xcc, 0x0b, 0xa2, 0x0c, 0x6f, 0x22, 0xda, 0xd2, 0x09, 0xc8, 0x9c, 0x34, 0x5c,
	0x3b, 0xf0, 0x00, 0xee, 0x87, 0x87, 0x43, 0x0b, 0xd2, 0xb9, 0x20, 0x89, 0x15, 0x44, 0x80, 0xb6,
	0x84, 0x7b, 0x44, 0xfd, 0x3d, 0x35, 0x84, 0xbf, 0x53, 0x5a, 0x31, 0x4d, 0x36, 0xb6, 0x08, 0xf3,
	0xd2, 0x30, 0xad, 0x34, 0x4a, 0x69, 0x79, 0xf3, 0x09, 0xb6, 0x88, 0x7e, 0x06, 0xe6, 0x68, 0x92,
	0xfd, 0xa8, 0xeb, 0xe2, 0xdc, 0x29, 0x1f, 0x0e, 0x6d, 0xe0, 0x72, 0xe0, 0x25, 0x12, 0x33, 0x88,
	0x66, 0x79, 0x5b, 0x18, 0x59, 0x00, 0x33, 0x16, 0xf1, 0xb1, 0x81, 0x7d, 0x9c, 0x4d, 0x33, 0x39,
	0x77, 0x3a, 0xed, 0xdc, 0x42, 0x10, 0x4a, 0x7c, 0x04, 0xa2, 0x2e, 0x48, 0x6f, 0x82, 0xa5, 0x40,
	0x77, 0x03, 0x3b, 0x62, 0xad, 0xb9, 0xd3, 0x3f, 0x1e, 0x5a, 0xc3, 0x6c, 0x78, 0x32, 0xba, 0x0c,
	0x21, 0x5a, 0x10, 0x7d, 0x87, 0xd8, 0xe1, 0x8b, 0x5e, 0x02, 0xd3, 0x3c, 0x84, 0xbd, 0x6c, 0xe6,
	0x5e, 0x62, 0x2b, 0xb3, 0x7b, 0x37, 0xdf, 0xbf, 0x15, 0xe5, 0x45, 0xe8, 0x14, 0x57, 0xa9, 0x2a,
	0x9d, 0x76, 0x6e, 0x5e, 0xce, 0x09, 0x1e, 0x44, 0x01, 0x8f, 0xd8, 0x74, 0x32, 0x3b, 0x7a, 0x3a,
	0x29, 0x82, 0x05, 0xa7, 0x65, 0xd3, 0xc0, 0xe8, 0x26, 0xd6, 0xb9, 0x68, 0x3a, 0x89, 0x00, 0x20,
	0x9a, 0x63, 0x3d, 0x8f, 0xa4, 0x1c, 0x1b, 0xca, 0x26, 0xf3, 0xea, 0xd9, 0x64, 0x6f, 0xe9, 0xa7,
	0xff, 0xfc, 0xed, 0xdb, 0xa1, 0x8c, 0x01, 0x3f, 0xd1, 0x80, 0xce, 0xf6, 0x52, 0xbf, 0xe1, 0xda,
	0x88, 0x18, 0xcf, 0x70, 0xe5, 0x8c, 0xf8, 0xfa, 0xb7, 0x00, 0xcb, 0x15, 0xe1, 0xbc, 0xb2, 0xda,
	0x0b, 0x09, 0x69, 0x50, 0xa4, 0x15, 0xd1, 0xa2, 0x94, 0x2e, 0x31, 0xea, 0x8c, 0x4d, 0x77, 0x4b,
	0x92, 0x28, 0xa5, 0x41, 0x88, 0x64, 0x28, 0xfc, 0x58, 0x03, 0x8b, 0x25, 0xaf, 0xfa, 0xb4, 0x4e,
	0x6e, 0x58, 0x91, 0xc7, 0x60, 0x99, 0x4d, 0x89, 0xd0, 0x01, 0x11, 0xaf, 0xee, 0xd8, 0x1e, 0xd1,
	0x77, 0x41, 0x90, 0xcc, 0xba, 0xfc, 0xa4, 0x1d, 0xb1, 0x3b, 0xd4, 0xcb, 0x79, 0xa6, 0x01, 0x7f,
	0x35, 0x09, 0x66, 0x65, 0x66, 0x63, 0x18, 0x34, 0x82, 0x78, 0xfd, 0x7d, 0x90, 0x12, 0x6e, 0x4b,
	0x93, 0x74, 0x66, 0x77, 0x3d, 0xcf, 0xe3, 0x2c, 0x4f, 0x4b, 0xab, 0xbc, 0x28, 0xad, 0xf2, 0x07,
	0x8e, 0x69, 0x17, 0x57, 0x44, 0x40, 0xcc, 0x71, 0x7e, 0x81, 0x1f, 0x0b, 0x7a, 0xfd, 0x3e, 0x98,
	0xaa, 0x30, 0x46, 0x49, 0xe6, 0xff, 0x8b, 0x9d, 0x76, 0x6e, 0x56, 0x48, 0xe6, 0x40, 0x3e, 0xac,
	0x6f, 0x83, 0x69, 0x97, 0x18, 0x34, 0x84, 0x59, 0xda, 0x4d, 0x14, 0xf5, 0x5e, 0x90, 0x89, 0x01,
	0x88, 0x02, 0x08, 0xfc, 0x4f, 0x02, 0xdc, 0x19, 0x50, 0x18, 0xdd, 0xd6, 0x44, 0x97, 0x56, 0x34,
	0xa9, 0x6b, 0xad, 0x68, 0xa6, 0xc7, 0xae, 0x68, 0x66, 0x86, 0xa8, 0x68, 0xfe, 0xa1, 0x81, 0xb5,
	0x5e, 0xf1, 0x5e, 0x64, 0x59, 0x87, 0x56, 0xd9, 0x0f, 0x09, 0xb9, 0x81, 0x55, 0x7f, 0x11, 0x8a,
	0x8f, 0x74, 0xf1, 0xc1, 0xd0, 0x1b, 0xd4, 0xe0, 0x70, 0x81, 0xbf, 0xd1, 0x58, 0xdc, 0x77, 0x4b,
	0xb6, 0x6b, 0xb5, 0x2d, 0xa1, 0x64, 0xdb, 0x3b, 0x60, 0x1a, 0x1b, 0x65, 0x9f, 0x9c, 0x07, 0xc6,
	0x49, 0x91, 0x28, 0x06, 0xa8, 0xbe, 0xc6, 0x73, 0xfa, 0xe7, 0xcf, 0x1a, 0x98, 0x2f, 0x79, 0xd5,
	0x0f, 0xea, 0x06, 0x2b, 0xf3, 0x2c, 0xd3, 0xbe, 0x81, 0xd5, 0xf8, 0x0e, 0xd0, 0x83, 0x11, 0x4c,
	0x55, 0x28, 0xd7, 0x4c, 0x8f, 0x2a, 0x4f, 0xed, 0x7d, 0xa3, 0xd3, 0xce, 0xad, 0x87, 0xa9, 0x7b,
	0x18, 0x88, 0x16, 0x2b, 0xc1, 0x4c, 0x5b, 0xa6, 0xfd, 0x5d, 0xda, 0xf5, 0x47, 0x8d, 0xa5, 0x71,
	0xb1, 0x02, 0x07, 0xa7, 0xd8, 0xae, 0x12, 0x56, 0x3d, 0x7d, 0xf9, 0x76, 0x45, 0x6b, 0xbd, 0x84,
	0x7a, 0xad, 0x07, 0xff, 0x3b, 0x29, 0x9b, 0xc1, 0xab, 0x97, 0xa3, 0x73, 0xd3, 0xbf, 0x01, 0x33,
	0xe2, 0xd2, 0x51, 0xe2, 0x5a, 0xd3, 0x51, 0x72, 0xec, 0x74, 0x34, 0x35, 0x44, 0x49, 0xb4, 0xfe,
	0xc9, 0xa7, 0xb9, 0x89, 0x7f, 0x7d, 0x9a, 0x9b, 0xe8, 0x2f, 0x8d, 0x3e, 0x4e, 0xb0, 0xd2, 0xe8,
	0xf9, 0x29, 0x6e, 0x3d, 0x74, 0x9d, 0x8f, 0x88, 0xcd, 0xee, 0x04, 0x6e, 0x60, 0xde, 0x09, 0xc8,
	0xf8, 0xa7, 0xb8, 0x55, 0x0e, 0x65, 0xaa, 0x91, 0x4f, 0x33, 0x12, 0x2b, 0x88, 0x00, 0x6d, 0x89,
	0xb5, 0x78, 0x2f, 0x6e, 0x2d, 0x24, 0xdb, 0x6c, 0xc7, 0x20, 0x97, 0x2e, 0xc4, 0xa8, 0x7b, 0xdd,
	0x65, 0x0b, 0xf1, 0xeb, 0x04, 0x2b, 0x0c, 0x0f, 0x49, 0x8d, 0xf8, 0xe4, 0x3a, 0x8e, 0xbe, 0xa3,
	0x2d, 0xc3, 0x76, 0xef, 0x7c, 0xc1, 0x53, 0x92, 0x3e, 0xca, 0xf1, 0x21, 0x79, 0xad, 0xc1, 0x32,
	0x35, 0x76, 0xb0, 0xa4, 0xae, 0x27, 0x58, 0xaa, 0x60, 0xb5, 0xe4, 0x55, 0x5f, 0x98, 0xfe, 0xa9,
	0xe1, 0xe2, 0xd6, 0x53, 0x7a, 0x64, 0x11, 0x17, 0x72, 0x6f, 0x84, 0x26, 0x9b, 0x2d, 0x93, 0x3c,
	0xab, 0x59, 0xba, 0x4b, 0x49, 0x37, 0x10, 0x28, 0x68, 0xee, 0x2d, 0xcb, 0xd2, 0x82, 0x5e, 0xf8,
	0x73, 0x8d, 0x55, 0x8c, 0x81, 0xa4, 0xe3, 0x16, 0xae, 0x1f, 0xd6, 0x1d, 0xef, 0x2a, 0x31, 0x6f,
	0xf6, 0x5d, 0x2f, 0x71, 0x69, 0x91, 0x3b, 0xa4, 0x35, 0x30, 0x4d, 0x8f, 0x98, 0xb4, 0xbc, 0x63,
	0x61, 0x86, 0x52, 0x06, 0x76, 0x9e, 0x34, 0xac, 0xbd, 0xbb, 0xb2, 0x32, 0x11, 0x56, 0xf0, 0x27,
	0xac, 0xa4, 0x09, 0x54, 0x3a, 0x24, 0x4d, 0xb3, 0x42, 0xd4, 0xac, 0x57, 0x53, 0xeb, 0x72, 0xe9,
	0x2f, 0x35, 0x30, 0x47, 0x77, 0x08, 0xa7, 0xe6, 0xd8, 0x17, 0x08, 0xfb, 0x44, 0x9e, 0x53, 0x2d,
	0x34, 0xa7, 0xfa, 0x5b, 0xfd, 0x2e, 0xc4, 0x05, 0x46, 0xdd, 0xe4, 0x08, 0x64, 0x84, 0x47, 0xba,
	0xd8, 0x27, 0xcc, 0xe1, 0x33, 0xbb, 0x9b, 0x83, 0x0e, 0xd4, 0x3d, 0xb9, 0xc5, 0x24, 0xcd, 0x49,
	0x08, 0x70, 0x42, 0xda, 0x03, 0x7f, 0x04, 0x80, 0x92, 0x5e, 0x45, 0x90, 0x64, 0x72, 0x78, 0x2c,
	0xe6, 0x87, 0xcb, 0x6d, 0x88, 0xd1, 0xc2, 0xdf, 0xa5, 0x58, 0x9a, 0x08, 0xdd, 0x95, 0xdd, 0xde,
	0x90, 0xdd, 0xde, 0x90, 0xdd, 0xde, 0x90, 0x89, 0x1b, 0xb2, 0x41, 0xf7, 0x3f, 0x7f, 0x09, 0x55,
	0xc9, 0xd7, 0x74, 0xb5, 0x3c, 0xda, 0xfe, 0x5a, 0x0a, 0xef, 0xaf, 0x63, 0xde, 0xdf, 0xc1, 0x3f,
	0x68, 0x60, 0x3a, 0x30, 0xe6, 0xdb, 0x7d, 0x69, 0xf6, 0x0a, 0x73, 0x22, 0xdb, 0x42, 0xe8, 0xdc,
	0x3f, 0x39, 0xd2, 0xb9, 0x3f, 0xa1, 0xee, 0xf9, 0xf0, 0x97, 0x49, 0x76, 0x18, 0xa3, 0x87, 0xe3,
	0xe7, 0xce, 0xb5, 0x54, 0x9d, 0xbe, 0x13, 0xc9, 0x62, 0xd2, 0x72, 0xf4, 0xc6, 0x20, 0x4a, 0xfb,
	0xce, 0x78, 0x19, 0x2c, 0x92, 0x57, 0x92, 0x5f, 0x50, 0x5e, 0x69, 0x82, 0xa5, 0x86, 0x47, 0xca,
	0xe1, 0x18, 0x9f, 0x1a, 0x2f, 0x82, 0xfa, 0x18, 0x42, 0xb4, 0xd0, 0xf0, 0xc8, 0x43, 0x39, 0xd4,
	0x07, 0x94, 0x60, 0xa9, 0x51, 0x4a, 0xb0, 0x90, 0x6b, 0x4c, 0x0f, 0xe1, 0x1a, 0xff, 0xd3, 0xc0,
	0xdd, 0xe8, 0xa9, 0xf6, 0x58, 0xca, 0xeb, 0x5f, 0x7e, 0xd8, 0x46, 0xf7, 0xac, 0xc4, 0x17, 0xb5,
	0x67, 0xc1, 0x7f, 0x6b, 0xec, 0x2b, 0x6a, 0xc8, 0xf6, 0xc3, 0xa6, 0x75, 0x53, 0x86, 0x97, 0x41,
	0xda, 0x68, 0x5a, 0x21, 0xab, 0x8b, 0x43, 0x5b, 0x2d, 0x52, 0x48, 0x97, 0x11, 0x44, 0x33, 0x86,
	0x30, 0x69, 0xb0, 0xbd, 0xc1, 0xd7, 0x8e, 0x9b, 0xb1, 0xb7, 0xbb, 0x5b, 0x8d, 0x6b, 0x6f, 0x6f,
	0x97, 0x9a, 0x31, 0x84, 0x49, 0xf0, 0x4f, 0xfc, 0x5b, 0x44, 0xc8, 0xde, 0x47, 0xc6, 0x0d, 0x58,
	0xfa, 0x00, 0xcc, 0xdb, 0xa4, 0x55, 0xee, 0x4b, 0x7f, 0xd2, 0xb7, 0xe8, 0xf0, 0x38, 0x44, 0xb3,
	0x36, 0x69, 0x1d, 0x04, 0x0c, 0xe0, 0xcb, 0x49, 0x76, 0x1c, 0x12, 0x1d, 0x2c, 0x83, 0xef, 0xd7,
	0xeb, 0xae, 0xd3, 0x24, 0x34, 0x83, 0x60, 0xfe, 0x37, 0x62, 0x90, 0x94, 0x41, 0x22, 0x00, 0x88,
	0xe6, 0x45, 0xcf, 0x78, 0x66, 0xbd, 0x0f, 0x96, 0x02, 0xce, 0xc4, 0x36, 0xca, 0x27, 0x35, 0xa7,
	0x72, 0x26, 0x2c, 0xfb, 0x4a, 0x2f, 0x0d, 0xca, 0x90, 0x22, 0x85, 0x40, 0x14, 0x68, 0x7c, 0x64,
	0x1b, 0xac, 0xa7, 0x6f, 0x49, 0x92, 0x43, 0xbc, 0x85, 0xf8, 0xc5, 0x24, 0x3b, 0xc0, 0x3d, 0x23,
	0xae, 0xe7, 0xd8, 0x87, 0x4d, 0xeb, 0x76, 0x62, 0x44, 0x4b, 0x67, 0xc7, 0x97, 0x23, 0xab, 0xee,
	0x5f, 0x04, 0x9f, 0x9c, 0x76, 0x5f, 0xae, 0x80, 0x44, 0xc9, 0xab, 0xea, 0x1f, 0x84, 0xce, 0x51,
	0x5f, 0x1d, 0x58, 0x18, 0xc9, 0x47, 0xc0, 0x8d, 0xaf, 0xc7, 0x40, 0x42, 0xec, 0xf5, 0x1f, 0x82,
	0xb9, 0xf0, 0x71, 0x29, 0x8e, 0x2c, 0x84, 0x52, 0x64, 0x5e, 0x01, 0x4b, 0xfd, 0x65, 0xe5, 0x56,
	0x9c, 0x80, 0x28, 0x52, 0x51, 0xc8, 0x09, 0x58, 0x16, 0xa4, 0xe1, 0xeb, 0xa1, 0x38, 0xea, 0x10,
	0x6a, 0x68, 0x43, 0xa4, 0x5b, 0xe4, 0x2b, 0x0c, 0xe9, 0x21, 0x87, 0x16, 0x22, 0xdd, 0xf1, 0x5e,
	0x21, 0xa4, 0x87, 0x54, 0x14, 0xf2, 0x02, 0x64, 0xe4, 0xa2, 0x12, 0xc6, 0x10, 0x49, 0x18, 0x45,
	0xc6, 0x3f, 0x06, 0xd9, 0xd8, 0x92, 0xa4, 0xa0, 0x32, 0x53, 0x12, 0x81, 0xa2, 0xc8, 0x33, 0xb0,
	0x32, 0xb8, 0x12, 0xd8, 0x56, 0x91, 0x17, 0xa0, 0x47, 0x15, 0x16, 0x6c, 0xc3, 0x6a, 0xc2, 0x04,
	0x5a, 0x51, 0x58, 0x19, 0x2c, 0x44, 0xf7, 0xc0, 0xfb, 0x2a, 0x62, 0x1e, 0x19, 0x8a, 0x02, 0x30,
	0x58, 0xec, 0xbb, 0x3f, 0x7b, 0x2b, 0x86, 0x32, 0x0a, 0x54, 0x14, 0x51, 0x05, 0x77, 0x06, 0x5d,
	0x06, 0xbe, 0x7d, 0x85, 0x14, 0x09, 0xab, 0x28, 0xc8, 0x04, 0xcb, 0x03, 0x2f, 0xde, 0xde, 0xb9,
	0x42, 0x92, 0x0c, 0x56, 0x5f, 0x97, 0xe8, 0xc7, 0x80, 0xb8, 0x75, 0x89, 0xe0, 0xd4, 0xc3, 0x53,
	0xfe, 0x00, 0x17, 0x17, 0x9e, 0x12, 0x46, 0x7d, 0x35, 0x06, 0xd5, 0x22, 0x6f, 0x5f, 0xee, 0x55,
	0x32, 0x56, 0xdd, 0xb3, 0xfa, 0x36, 0xf6, 0x38, 0xcf, 0x8a, 0x02, 0x15, 0x45, 0x1c, 0x83, 0x74,
	0xef, 0xab, 0xea, 0xbd, 0xab, 0xb6, 0x13, 0x75, 0xbd, 0xfb, 0xde, 0x20, 0xc4, 0xe9, 0x1d, 0x05,
	0x2a, 0x2f, 0x6e, 0xba, 0xf7, 0x0a, 0x24, 0x4e, 0xef, 0x2e, 0x62, 0x63, 0xeb, 0x2a, 0x84, 0xbc,
	0x89, 0x87, 0xdf, 0xcc, 0xc4, 0xe9, 0x13, 0x42, 0xa9, 0xfb, 0x7c, 0xf4, 0x6d, 0xd0, 0xfd, 0x58,
	0xcd, 0x42, 0x38, 0x45, 0x01, 0x0e, 0x58, 0x8b, 0x7b, 0xdd, 0x98, 0x57, 0x29, 0x46, 0x86, 0xae,
	0x18, 0xce, 0xc0, 0xca, 0xe0, 0x77, 0xb8, 0xdb, 0x8a, 0xeb, 0xcd, 0xd0, 0x8a, 0xc2, 0x2c, 0xb0,
	0x1a, 0xf3, 0x9c, 0xf8, 0xdd, 0x18, 0xfa, 0xc1, 0x70, 0x75, 0xdb, 0x06, 0xbf, 0x8a, 0xde, 0x8e,
	0x5d, 0xb3, 0x01, 0x68, 0x35, 0x61, 0xc5, 0x07, 0x9f, 0xbd, 0xda, 0xd4, 0x3e, 0x7f, 0xb5, 0xa9,
	0xfd, 0xfd, 0xd5, 0xa6, 0xf6, 0xb3, 0xd7, 0x9b, 0x13, 0x9f, 0xbf, 0xde, 0x9c, 0xf8, 0xeb, 0xeb,
	0xcd, 0x89, 0x1f, 0xbc, 0x29, 0x93, 0x57, 0x2a, 0x05, 0x56, 0x50, 0x57, 0x4e, 0xb1, 0x69, 0x17,
	0xce, 0x0b, 0x06, 0x76, 0xf8, 0x89, 0xf0, 0x24, 0xc5, 0x5e, 0x73, 0x7f, 0xe3, 0xff, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x0f, 0x45, 0xa4, 0xa6, 0x3c, 0x2e, 0x00, 0x00,
}

var _ context.Context
var _ grpc.ClientConn

const _ = grpc.SupportPackageIsVersion4


type MsgClient interface {
	ColonyRate(ctx context.Context, in *MsgColonyRate, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	CreateCluster(ctx context.Context, in *MsgCreateCluster, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	ClusterAddMembers(ctx context.Context, in *MsgClusterAddMembers, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	ClusterDeleteMembers(ctx context.Context, in *MsgDeleteMembers, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	ClusterChangeName(ctx context.Context, in *MsgClusterChangeName, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	ClusterMemberExit(ctx context.Context, in *MsgClusterMemberExit, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	BurnToPower(ctx context.Context, in *MsgBurnToPower, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	
	ClusterChangeSalaryRatio(ctx context.Context, in *MsgClusterChangeSalaryRatio, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	ClusterChangeDvmRatio(ctx context.Context, in *MsgClusterChangeDvmRatio, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	ClusterChangeDaoRatio(ctx context.Context, in *MsgClusterChangeDaoRatio, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	ClusterChangeId(ctx context.Context, in *MsgClusterChangeId, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	WithdrawSwapDpos(ctx context.Context, in *MsgWithdrawSwapDpos, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	WithdrawOwnerReward(ctx context.Context, in *MsgWithdrawOwnerReward, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	WithdrawDeviceReward(ctx context.Context, in *MsgWithdrawDeviceReward, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	ThawFrozenPower(ctx context.Context, in *MsgThawFrozenPower, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	UpdateAdmin(ctx context.Context, in *MsgUpdateAdmin, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	ClusterPowerApprove(ctx context.Context, in *MsgClusterPowerApprove, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	PersonDvmApprove(ctx context.Context, in *MsgPersonDvmApprove, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	ClusterAd(ctx context.Context, in *MsgClusterAd, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	AgreeJoinCluster(ctx context.Context, in *MsgAgreeJoinCluster, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	RedPacket(ctx context.Context, in *MsgRedPacket, opts ...grpc.CallOption) (*MsgRedPacketResponse, error)
	OpenRedPacket(ctx context.Context, in *MsgOpenRedPacket, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	ReturnRedPacket(ctx context.Context, in *MsgReturnRedPacket, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	CreateClusterAddMembers(ctx context.Context, in *MsgCreateClusterAddMembers, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	AgreeJoinClusterApply(ctx context.Context, in *MsgAgreeJoinClusterApply, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	StartPowerRewardRedeem(ctx context.Context, in *MsgStartPowerRewardRedeem, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	ReceivePowerCutReward(ctx context.Context, in *MsgReceivePowerCutReward, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ColonyRate(ctx context.Context, in *MsgColonyRate, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.dao.v1.Msg/ColonyRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateCluster(ctx context.Context, in *MsgCreateCluster, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.dao.v1.Msg/CreateCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClusterAddMembers(ctx context.Context, in *MsgClusterAddMembers, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.dao.v1.Msg/ClusterAddMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClusterDeleteMembers(ctx context.Context, in *MsgDeleteMembers, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.dao.v1.Msg/ClusterDeleteMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClusterChangeName(ctx context.Context, in *MsgClusterChangeName, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.dao.v1.Msg/ClusterChangeName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClusterMemberExit(ctx context.Context, in *MsgClusterMemberExit, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.dao.v1.Msg/ClusterMemberExit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BurnToPower(ctx context.Context, in *MsgBurnToPower, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.dao.v1.Msg/BurnToPower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClusterChangeSalaryRatio(ctx context.Context, in *MsgClusterChangeSalaryRatio, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.dao.v1.Msg/ClusterChangeSalaryRatio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClusterChangeDvmRatio(ctx context.Context, in *MsgClusterChangeDvmRatio, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.dao.v1.Msg/ClusterChangeDvmRatio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClusterChangeDaoRatio(ctx context.Context, in *MsgClusterChangeDaoRatio, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.dao.v1.Msg/ClusterChangeDaoRatio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClusterChangeId(ctx context.Context, in *MsgClusterChangeId, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.dao.v1.Msg/ClusterChangeId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawSwapDpos(ctx context.Context, in *MsgWithdrawSwapDpos, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.dao.v1.Msg/WithdrawSwapDpos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawOwnerReward(ctx context.Context, in *MsgWithdrawOwnerReward, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.dao.v1.Msg/WithdrawOwnerReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawDeviceReward(ctx context.Context, in *MsgWithdrawDeviceReward, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.dao.v1.Msg/WithdrawDeviceReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ThawFrozenPower(ctx context.Context, in *MsgThawFrozenPower, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.dao.v1.Msg/ThawFrozenPower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAdmin(ctx context.Context, in *MsgUpdateAdmin, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.dao.v1.Msg/UpdateAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClusterPowerApprove(ctx context.Context, in *MsgClusterPowerApprove, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.dao.v1.Msg/ClusterPowerApprove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PersonDvmApprove(ctx context.Context, in *MsgPersonDvmApprove, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.dao.v1.Msg/PersonDvmApprove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClusterAd(ctx context.Context, in *MsgClusterAd, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.dao.v1.Msg/ClusterAd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AgreeJoinCluster(ctx context.Context, in *MsgAgreeJoinCluster, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.dao.v1.Msg/AgreeJoinCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RedPacket(ctx context.Context, in *MsgRedPacket, opts ...grpc.CallOption) (*MsgRedPacketResponse, error) {
	out := new(MsgRedPacketResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.dao.v1.Msg/RedPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) OpenRedPacket(ctx context.Context, in *MsgOpenRedPacket, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.dao.v1.Msg/OpenRedPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReturnRedPacket(ctx context.Context, in *MsgReturnRedPacket, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.dao.v1.Msg/ReturnRedPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateClusterAddMembers(ctx context.Context, in *MsgCreateClusterAddMembers, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.dao.v1.Msg/CreateClusterAddMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AgreeJoinClusterApply(ctx context.Context, in *MsgAgreeJoinClusterApply, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.dao.v1.Msg/AgreeJoinClusterApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StartPowerRewardRedeem(ctx context.Context, in *MsgStartPowerRewardRedeem, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.dao.v1.Msg/StartPowerRewardRedeem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReceivePowerCutReward(ctx context.Context, in *MsgReceivePowerCutReward, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.dao.v1.Msg/ReceivePowerCutReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type MsgServer interface {
	ColonyRate(context.Context, *MsgColonyRate) (*MsgEmptyResponse, error)
	CreateCluster(context.Context, *MsgCreateCluster) (*MsgEmptyResponse, error)
	ClusterAddMembers(context.Context, *MsgClusterAddMembers) (*MsgEmptyResponse, error)
	ClusterDeleteMembers(context.Context, *MsgDeleteMembers) (*MsgEmptyResponse, error)
	ClusterChangeName(context.Context, *MsgClusterChangeName) (*MsgEmptyResponse, error)
	ClusterMemberExit(context.Context, *MsgClusterMemberExit) (*MsgEmptyResponse, error)
	BurnToPower(context.Context, *MsgBurnToPower) (*MsgEmptyResponse, error)
	
	ClusterChangeSalaryRatio(context.Context, *MsgClusterChangeSalaryRatio) (*MsgEmptyResponse, error)
	ClusterChangeDvmRatio(context.Context, *MsgClusterChangeDvmRatio) (*MsgEmptyResponse, error)
	ClusterChangeDaoRatio(context.Context, *MsgClusterChangeDaoRatio) (*MsgEmptyResponse, error)
	ClusterChangeId(context.Context, *MsgClusterChangeId) (*MsgEmptyResponse, error)
	WithdrawSwapDpos(context.Context, *MsgWithdrawSwapDpos) (*MsgEmptyResponse, error)
	WithdrawOwnerReward(context.Context, *MsgWithdrawOwnerReward) (*MsgEmptyResponse, error)
	WithdrawDeviceReward(context.Context, *MsgWithdrawDeviceReward) (*MsgEmptyResponse, error)
	ThawFrozenPower(context.Context, *MsgThawFrozenPower) (*MsgEmptyResponse, error)
	UpdateAdmin(context.Context, *MsgUpdateAdmin) (*MsgEmptyResponse, error)
	ClusterPowerApprove(context.Context, *MsgClusterPowerApprove) (*MsgEmptyResponse, error)
	PersonDvmApprove(context.Context, *MsgPersonDvmApprove) (*MsgEmptyResponse, error)
	ClusterAd(context.Context, *MsgClusterAd) (*MsgEmptyResponse, error)
	AgreeJoinCluster(context.Context, *MsgAgreeJoinCluster) (*MsgEmptyResponse, error)
	RedPacket(context.Context, *MsgRedPacket) (*MsgRedPacketResponse, error)
	OpenRedPacket(context.Context, *MsgOpenRedPacket) (*MsgEmptyResponse, error)
	ReturnRedPacket(context.Context, *MsgReturnRedPacket) (*MsgEmptyResponse, error)
	CreateClusterAddMembers(context.Context, *MsgCreateClusterAddMembers) (*MsgEmptyResponse, error)
	AgreeJoinClusterApply(context.Context, *MsgAgreeJoinClusterApply) (*MsgEmptyResponse, error)
	StartPowerRewardRedeem(context.Context, *MsgStartPowerRewardRedeem) (*MsgEmptyResponse, error)
	ReceivePowerCutReward(context.Context, *MsgReceivePowerCutReward) (*MsgEmptyResponse, error)
}

type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ColonyRate(ctx context.Context, req *MsgColonyRate) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColonyRate not implemented")
}
func (*UnimplementedMsgServer) CreateCluster(ctx context.Context, req *MsgCreateCluster) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCluster not implemented")
}
func (*UnimplementedMsgServer) ClusterAddMembers(ctx context.Context, req *MsgClusterAddMembers) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterAddMembers not implemented")
}
func (*UnimplementedMsgServer) ClusterDeleteMembers(ctx context.Context, req *MsgDeleteMembers) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterDeleteMembers not implemented")
}
func (*UnimplementedMsgServer) ClusterChangeName(ctx context.Context, req *MsgClusterChangeName) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterChangeName not implemented")
}
func (*UnimplementedMsgServer) ClusterMemberExit(ctx context.Context, req *MsgClusterMemberExit) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterMemberExit not implemented")
}
func (*UnimplementedMsgServer) BurnToPower(ctx context.Context, req *MsgBurnToPower) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnToPower not implemented")
}
func (*UnimplementedMsgServer) ClusterChangeSalaryRatio(ctx context.Context, req *MsgClusterChangeSalaryRatio) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterChangeSalaryRatio not implemented")
}
func (*UnimplementedMsgServer) ClusterChangeDvmRatio(ctx context.Context, req *MsgClusterChangeDvmRatio) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterChangeDvmRatio not implemented")
}
func (*UnimplementedMsgServer) ClusterChangeDaoRatio(ctx context.Context, req *MsgClusterChangeDaoRatio) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterChangeDaoRatio not implemented")
}
func (*UnimplementedMsgServer) ClusterChangeId(ctx context.Context, req *MsgClusterChangeId) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterChangeId not implemented")
}
func (*UnimplementedMsgServer) WithdrawSwapDpos(ctx context.Context, req *MsgWithdrawSwapDpos) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawSwapDpos not implemented")
}
func (*UnimplementedMsgServer) WithdrawOwnerReward(ctx context.Context, req *MsgWithdrawOwnerReward) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawOwnerReward not implemented")
}
func (*UnimplementedMsgServer) WithdrawDeviceReward(ctx context.Context, req *MsgWithdrawDeviceReward) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawDeviceReward not implemented")
}
func (*UnimplementedMsgServer) ThawFrozenPower(ctx context.Context, req *MsgThawFrozenPower) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThawFrozenPower not implemented")
}
func (*UnimplementedMsgServer) UpdateAdmin(ctx context.Context, req *MsgUpdateAdmin) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdmin not implemented")
}
func (*UnimplementedMsgServer) ClusterPowerApprove(ctx context.Context, req *MsgClusterPowerApprove) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterPowerApprove not implemented")
}
func (*UnimplementedMsgServer) PersonDvmApprove(ctx context.Context, req *MsgPersonDvmApprove) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PersonDvmApprove not implemented")
}
func (*UnimplementedMsgServer) ClusterAd(ctx context.Context, req *MsgClusterAd) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterAd not implemented")
}
func (*UnimplementedMsgServer) AgreeJoinCluster(ctx context.Context, req *MsgAgreeJoinCluster) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgreeJoinCluster not implemented")
}
func (*UnimplementedMsgServer) RedPacket(ctx context.Context, req *MsgRedPacket) (*MsgRedPacketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedPacket not implemented")
}
func (*UnimplementedMsgServer) OpenRedPacket(ctx context.Context, req *MsgOpenRedPacket) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenRedPacket not implemented")
}
func (*UnimplementedMsgServer) ReturnRedPacket(ctx context.Context, req *MsgReturnRedPacket) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnRedPacket not implemented")
}
func (*UnimplementedMsgServer) CreateClusterAddMembers(ctx context.Context, req *MsgCreateClusterAddMembers) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClusterAddMembers not implemented")
}
func (*UnimplementedMsgServer) AgreeJoinClusterApply(ctx context.Context, req *MsgAgreeJoinClusterApply) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgreeJoinClusterApply not implemented")
}
func (*UnimplementedMsgServer) StartPowerRewardRedeem(ctx context.Context, req *MsgStartPowerRewardRedeem) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPowerRewardRedeem not implemented")
}
func (*UnimplementedMsgServer) ReceivePowerCutReward(ctx context.Context, req *MsgReceivePowerCutReward) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceivePowerCutReward not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ColonyRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgColonyRate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ColonyRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.dao.v1.Msg/ColonyRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ColonyRate(ctx, req.(*MsgColonyRate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.dao.v1.Msg/CreateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateCluster(ctx, req.(*MsgCreateCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClusterAddMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClusterAddMembers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClusterAddMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.dao.v1.Msg/ClusterAddMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClusterAddMembers(ctx, req.(*MsgClusterAddMembers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClusterDeleteMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteMembers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClusterDeleteMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.dao.v1.Msg/ClusterDeleteMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClusterDeleteMembers(ctx, req.(*MsgDeleteMembers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClusterChangeName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClusterChangeName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClusterChangeName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.dao.v1.Msg/ClusterChangeName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClusterChangeName(ctx, req.(*MsgClusterChangeName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClusterMemberExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClusterMemberExit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClusterMemberExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.dao.v1.Msg/ClusterMemberExit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClusterMemberExit(ctx, req.(*MsgClusterMemberExit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BurnToPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBurnToPower)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BurnToPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.dao.v1.Msg/BurnToPower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BurnToPower(ctx, req.(*MsgBurnToPower))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClusterChangeSalaryRatio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClusterChangeSalaryRatio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClusterChangeSalaryRatio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.dao.v1.Msg/ClusterChangeSalaryRatio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClusterChangeSalaryRatio(ctx, req.(*MsgClusterChangeSalaryRatio))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClusterChangeDvmRatio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClusterChangeDvmRatio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClusterChangeDvmRatio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.dao.v1.Msg/ClusterChangeDvmRatio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClusterChangeDvmRatio(ctx, req.(*MsgClusterChangeDvmRatio))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClusterChangeDaoRatio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClusterChangeDaoRatio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClusterChangeDaoRatio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.dao.v1.Msg/ClusterChangeDaoRatio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClusterChangeDaoRatio(ctx, req.(*MsgClusterChangeDaoRatio))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClusterChangeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClusterChangeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClusterChangeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.dao.v1.Msg/ClusterChangeId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClusterChangeId(ctx, req.(*MsgClusterChangeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawSwapDpos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawSwapDpos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawSwapDpos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.dao.v1.Msg/WithdrawSwapDpos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawSwapDpos(ctx, req.(*MsgWithdrawSwapDpos))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawOwnerReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawOwnerReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawOwnerReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.dao.v1.Msg/WithdrawOwnerReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawOwnerReward(ctx, req.(*MsgWithdrawOwnerReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawDeviceReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawDeviceReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawDeviceReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.dao.v1.Msg/WithdrawDeviceReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawDeviceReward(ctx, req.(*MsgWithdrawDeviceReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ThawFrozenPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgThawFrozenPower)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ThawFrozenPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.dao.v1.Msg/ThawFrozenPower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ThawFrozenPower(ctx, req.(*MsgThawFrozenPower))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.dao.v1.Msg/UpdateAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAdmin(ctx, req.(*MsgUpdateAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClusterPowerApprove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClusterPowerApprove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClusterPowerApprove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.dao.v1.Msg/ClusterPowerApprove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClusterPowerApprove(ctx, req.(*MsgClusterPowerApprove))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PersonDvmApprove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPersonDvmApprove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PersonDvmApprove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.dao.v1.Msg/PersonDvmApprove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PersonDvmApprove(ctx, req.(*MsgPersonDvmApprove))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClusterAd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClusterAd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClusterAd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.dao.v1.Msg/ClusterAd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClusterAd(ctx, req.(*MsgClusterAd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AgreeJoinCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAgreeJoinCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AgreeJoinCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.dao.v1.Msg/AgreeJoinCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AgreeJoinCluster(ctx, req.(*MsgAgreeJoinCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RedPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRedPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RedPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.dao.v1.Msg/RedPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RedPacket(ctx, req.(*MsgRedPacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_OpenRedPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgOpenRedPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).OpenRedPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.dao.v1.Msg/OpenRedPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).OpenRedPacket(ctx, req.(*MsgOpenRedPacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReturnRedPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReturnRedPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReturnRedPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.dao.v1.Msg/ReturnRedPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReturnRedPacket(ctx, req.(*MsgReturnRedPacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateClusterAddMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateClusterAddMembers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateClusterAddMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.dao.v1.Msg/CreateClusterAddMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateClusterAddMembers(ctx, req.(*MsgCreateClusterAddMembers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AgreeJoinClusterApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAgreeJoinClusterApply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AgreeJoinClusterApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.dao.v1.Msg/AgreeJoinClusterApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AgreeJoinClusterApply(ctx, req.(*MsgAgreeJoinClusterApply))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StartPowerRewardRedeem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStartPowerRewardRedeem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StartPowerRewardRedeem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.dao.v1.Msg/StartPowerRewardRedeem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StartPowerRewardRedeem(ctx, req.(*MsgStartPowerRewardRedeem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReceivePowerCutReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReceivePowerCutReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReceivePowerCutReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.dao.v1.Msg/ReceivePowerCutReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReceivePowerCutReward(ctx, req.(*MsgReceivePowerCutReward))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "freemasonry.dao.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ColonyRate",
			Handler:    _Msg_ColonyRate_Handler,
		},
		{
			MethodName: "CreateCluster",
			Handler:    _Msg_CreateCluster_Handler,
		},
		{
			MethodName: "ClusterAddMembers",
			Handler:    _Msg_ClusterAddMembers_Handler,
		},
		{
			MethodName: "ClusterDeleteMembers",
			Handler:    _Msg_ClusterDeleteMembers_Handler,
		},
		{
			MethodName: "ClusterChangeName",
			Handler:    _Msg_ClusterChangeName_Handler,
		},
		{
			MethodName: "ClusterMemberExit",
			Handler:    _Msg_ClusterMemberExit_Handler,
		},
		{
			MethodName: "BurnToPower",
			Handler:    _Msg_BurnToPower_Handler,
		},
		{
			MethodName: "ClusterChangeSalaryRatio",
			Handler:    _Msg_ClusterChangeSalaryRatio_Handler,
		},
		{
			MethodName: "ClusterChangeDvmRatio",
			Handler:    _Msg_ClusterChangeDvmRatio_Handler,
		},
		{
			MethodName: "ClusterChangeDaoRatio",
			Handler:    _Msg_ClusterChangeDaoRatio_Handler,
		},
		{
			MethodName: "ClusterChangeId",
			Handler:    _Msg_ClusterChangeId_Handler,
		},
		{
			MethodName: "WithdrawSwapDpos",
			Handler:    _Msg_WithdrawSwapDpos_Handler,
		},
		{
			MethodName: "WithdrawOwnerReward",
			Handler:    _Msg_WithdrawOwnerReward_Handler,
		},
		{
			MethodName: "WithdrawDeviceReward",
			Handler:    _Msg_WithdrawDeviceReward_Handler,
		},
		{
			MethodName: "ThawFrozenPower",
			Handler:    _Msg_ThawFrozenPower_Handler,
		},
		{
			MethodName: "UpdateAdmin",
			Handler:    _Msg_UpdateAdmin_Handler,
		},
		{
			MethodName: "ClusterPowerApprove",
			Handler:    _Msg_ClusterPowerApprove_Handler,
		},
		{
			MethodName: "PersonDvmApprove",
			Handler:    _Msg_PersonDvmApprove_Handler,
		},
		{
			MethodName: "ClusterAd",
			Handler:    _Msg_ClusterAd_Handler,
		},
		{
			MethodName: "AgreeJoinCluster",
			Handler:    _Msg_AgreeJoinCluster_Handler,
		},
		{
			MethodName: "RedPacket",
			Handler:    _Msg_RedPacket_Handler,
		},
		{
			MethodName: "OpenRedPacket",
			Handler:    _Msg_OpenRedPacket_Handler,
		},
		{
			MethodName: "ReturnRedPacket",
			Handler:    _Msg_ReturnRedPacket_Handler,
		},
		{
			MethodName: "CreateClusterAddMembers",
			Handler:    _Msg_CreateClusterAddMembers_Handler,
		},
		{
			MethodName: "AgreeJoinClusterApply",
			Handler:    _Msg_AgreeJoinClusterApply_Handler,
		},
		{
			MethodName: "StartPowerRewardRedeem",
			Handler:    _Msg_StartPowerRewardRedeem_Handler,
		},
		{
			MethodName: "ReceivePowerCutReward",
			Handler:    _Msg_ReceivePowerCutReward_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tx.proto",
}

func (m *MsgReceivePowerCutReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReceivePowerCutReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReceivePowerCutReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStartPowerRewardRedeem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStartPowerRewardRedeem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStartPowerRewardRedeem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAgreeJoinClusterApply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAgreeJoinClusterApply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAgreeJoinClusterApply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GatewaySign) > 0 {
		i -= len(m.GatewaySign)
		copy(dAtA[i:], m.GatewaySign)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GatewaySign)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.GatewayAddress) > 0 {
		i -= len(m.GatewayAddress)
		copy(dAtA[i:], m.GatewayAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GatewayAddress)))
		i--
		dAtA[i] = 0x42
	}
	if m.MemberOnlineAmount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MemberOnlineAmount))
		i--
		dAtA[i] = 0x38
	}
	if len(m.MemberAddress) > 0 {
		i -= len(m.MemberAddress)
		copy(dAtA[i:], m.MemberAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MemberAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ChatAddress) > 0 {
		i -= len(m.ChatAddress)
		copy(dAtA[i:], m.ChatAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChatAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.IndexNum) > 0 {
		i -= len(m.IndexNum)
		copy(dAtA[i:], m.IndexNum)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IndexNum)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateClusterAddMembers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateClusterAddMembers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateClusterAddMembers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GatewaySign) > 0 {
		i -= len(m.GatewaySign)
		copy(dAtA[i:], m.GatewaySign)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GatewaySign)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.OwnerIndexNum) > 0 {
		i -= len(m.OwnerIndexNum)
		copy(dAtA[i:], m.OwnerIndexNum)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerIndexNum)))
		i--
		dAtA[i] = 0x6a
	}
	if m.MemberOnlineAmount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MemberOnlineAmount))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	{
		size := m.ClusterDaoRatio.Size()
		i -= size
		if _, err := m.ClusterDaoRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x4a
	}
	{
		size := m.FreezeAmount.Size()
		i -= size
		if _, err := m.FreezeAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.ClusterName) > 0 {
		i -= len(m.ClusterName)
		copy(dAtA[i:], m.ClusterName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClusterName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ChatAddress) > 0 {
		i -= len(m.ChatAddress)
		copy(dAtA[i:], m.ChatAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChatAddress)))
		i--
		dAtA[i] = 0x32
	}
	{
		size := m.BurnAmount.Size()
		i -= size
		if _, err := m.BurnAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.SalaryRatio.Size()
		i -= size
		if _, err := m.SalaryRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GateAddress) > 0 {
		i -= len(m.GateAddress)
		copy(dAtA[i:], m.GateAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GateAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgReturnRedPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReturnRedPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReturnRedPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Redpacketid) > 0 {
		i -= len(m.Redpacketid)
		copy(dAtA[i:], m.Redpacketid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Redpacketid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Fromaddress) > 0 {
		i -= len(m.Fromaddress)
		copy(dAtA[i:], m.Fromaddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Fromaddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgOpenRedPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOpenRedPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOpenRedPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Redpacketid) > 0 {
		i -= len(m.Redpacketid)
		copy(dAtA[i:], m.Redpacketid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Redpacketid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Fromaddress) > 0 {
		i -= len(m.Fromaddress)
		copy(dAtA[i:], m.Fromaddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Fromaddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRedPacketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRedPacketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRedPacketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Clusterid) > 0 {
		i -= len(m.Clusterid)
		copy(dAtA[i:], m.Clusterid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Clusterid)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *MsgRedPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRedPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRedPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Redtype != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Redtype))
		i--
		dAtA[i] = 0x28
	}
	if m.Count != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Clusterid) > 0 {
		i -= len(m.Clusterid)
		copy(dAtA[i:], m.Clusterid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Clusterid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Fromaddress) > 0 {
		i -= len(m.Fromaddress)
		copy(dAtA[i:], m.Fromaddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Fromaddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAgreeJoinCluster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAgreeJoinCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAgreeJoinCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GatewaySign) > 0 {
		i -= len(m.GatewaySign)
		copy(dAtA[i:], m.GatewaySign)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GatewaySign)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.GatewayAddress) > 0 {
		i -= len(m.GatewayAddress)
		copy(dAtA[i:], m.GatewayAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GatewayAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if m.MemberOnlineAmount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MemberOnlineAmount))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ChatAddress) > 0 {
		i -= len(m.ChatAddress)
		copy(dAtA[i:], m.ChatAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChatAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.IndexNum) > 0 {
		i -= len(m.IndexNum)
		copy(dAtA[i:], m.IndexNum)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IndexNum)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgReceiveBurnRewardFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReceiveBurnRewardFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReceiveBurnRewardFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClusterAd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClusterAd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClusterAd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdText) > 0 {
		i -= len(m.AdText)
		copy(dAtA[i:], m.AdText)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdText)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClusterId) > 0 {
		for iNdEx := len(m.ClusterId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClusterId[iNdEx])
			copy(dAtA[i:], m.ClusterId[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ClusterId[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAdmin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAdmin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClusterAdminList) > 0 {
		for iNdEx := len(m.ClusterAdminList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClusterAdminList[iNdEx])
			copy(dAtA[i:], m.ClusterAdminList[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ClusterAdminList[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClusterChangeName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClusterChangeName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClusterChangeName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClusterName) > 0 {
		i -= len(m.ClusterName)
		copy(dAtA[i:], m.ClusterName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClusterName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClusterMemberExit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClusterMemberExit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClusterMemberExit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GatewaySign) > 0 {
		i -= len(m.GatewaySign)
		copy(dAtA[i:], m.GatewaySign)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GatewaySign)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GatewayAddress) > 0 {
		i -= len(m.GatewayAddress)
		copy(dAtA[i:], m.GatewayAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GatewayAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.MemberOnlineAmount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MemberOnlineAmount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgThawFrozenPower) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgThawFrozenPower) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgThawFrozenPower) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChatAddress) > 0 {
		i -= len(m.ChatAddress)
		copy(dAtA[i:], m.ChatAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChatAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GatewayAddress) > 0 {
		i -= len(m.GatewayAddress)
		copy(dAtA[i:], m.GatewayAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GatewayAddress)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.ThawAmount.Size()
		i -= size
		if _, err := m.ThawAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteMembers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteMembers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteMembers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GatewaySign) > 0 {
		i -= len(m.GatewaySign)
		copy(dAtA[i:], m.GatewaySign)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GatewaySign)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.GatewayAddress) > 0 {
		i -= len(m.GatewayAddress)
		copy(dAtA[i:], m.GatewayAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GatewayAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.MemberOnlineAmount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MemberOnlineAmount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Members[iNdEx])
			copy(dAtA[i:], m.Members[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Members[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawOwnerReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawOwnerReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawOwnerReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawSwapDpos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawSwapDpos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawSwapDpos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DaoNum) > 0 {
		i -= len(m.DaoNum)
		copy(dAtA[i:], m.DaoNum)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DaoNum)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MemberAddress) > 0 {
		i -= len(m.MemberAddress)
		copy(dAtA[i:], m.MemberAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MemberAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawDeviceReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawDeviceReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawDeviceReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MemberAddress) > 0 {
		i -= len(m.MemberAddress)
		copy(dAtA[i:], m.MemberAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MemberAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgColonyRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgColonyRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgColonyRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OnlineRate) > 0 {
		for iNdEx := len(m.OnlineRate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OnlineRate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.GatewayAddress) > 0 {
		i -= len(m.GatewayAddress)
		copy(dAtA[i:], m.GatewayAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GatewayAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ColonyRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColonyRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ColonyRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Rate.Size()
		i -= size
		if _, err := m.Rate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateCluster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ClusterDaoRatio.Size()
		i -= size
		if _, err := m.ClusterDaoRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x4a
	}
	{
		size := m.FreezeAmount.Size()
		i -= size
		if _, err := m.FreezeAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.ClusterName) > 0 {
		i -= len(m.ClusterName)
		copy(dAtA[i:], m.ClusterName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClusterName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ChatAddress) > 0 {
		i -= len(m.ChatAddress)
		copy(dAtA[i:], m.ChatAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChatAddress)))
		i--
		dAtA[i] = 0x32
	}
	{
		size := m.BurnAmount.Size()
		i -= size
		if _, err := m.BurnAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.SalaryRatio.Size()
		i -= size
		if _, err := m.SalaryRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GateAddress) > 0 {
		i -= len(m.GateAddress)
		copy(dAtA[i:], m.GateAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GateAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClusterAddMembers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClusterAddMembers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClusterAddMembers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Members) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Members) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Members) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChatAddress) > 0 {
		i -= len(m.ChatAddress)
		copy(dAtA[i:], m.ChatAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChatAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IndexNum) > 0 {
		i -= len(m.IndexNum)
		copy(dAtA[i:], m.IndexNum)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IndexNum)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MemberAddress) > 0 {
		i -= len(m.MemberAddress)
		copy(dAtA[i:], m.MemberAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MemberAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBurnToPower) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnToPower) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnToPower) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChatAddress) > 0 {
		i -= len(m.ChatAddress)
		copy(dAtA[i:], m.ChatAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChatAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.GatewayAddress) > 0 {
		i -= len(m.GatewayAddress)
		copy(dAtA[i:], m.GatewayAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GatewayAddress)))
		i--
		dAtA[i] = 0x32
	}
	{
		size := m.UseFreezeAmount.Size()
		i -= size
		if _, err := m.UseFreezeAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.BurnAmount.Size()
		i -= size
		if _, err := m.BurnAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClusterChangeSalaryRatio) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClusterChangeSalaryRatio) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClusterChangeSalaryRatio) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SalaryRatio.Size()
		i -= size
		if _, err := m.SalaryRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClusterChangeDvmRatio) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClusterChangeDvmRatio) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClusterChangeDvmRatio) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.DvmRatio.Size()
		i -= size
		if _, err := m.DvmRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClusterChangeDaoRatio) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClusterChangeDaoRatio) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClusterChangeDaoRatio) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.DaoRatio.Size()
		i -= size
		if _, err := m.DaoRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClusterChangeId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClusterChangeId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClusterChangeId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewClusterId) > 0 {
		i -= len(m.NewClusterId)
		copy(dAtA[i:], m.NewClusterId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewClusterId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClusterPowerApprove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClusterPowerApprove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClusterPowerApprove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ApproveEndBlock) > 0 {
		i -= len(m.ApproveEndBlock)
		copy(dAtA[i:], m.ApproveEndBlock)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ApproveEndBlock)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ApproveAddress) > 0 {
		i -= len(m.ApproveAddress)
		copy(dAtA[i:], m.ApproveAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ApproveAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPersonDvmApprove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPersonDvmApprove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPersonDvmApprove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ApproveEndBlock) > 0 {
		i -= len(m.ApproveEndBlock)
		copy(dAtA[i:], m.ApproveEndBlock)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ApproveEndBlock)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ApproveAddress) > 0 {
		i -= len(m.ApproveAddress)
		copy(dAtA[i:], m.ApproveAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ApproveAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEmptyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEmptyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEmptyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgReceivePowerCutReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgStartPowerRewardRedeem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAgreeJoinClusterApply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IndexNum)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChatAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MemberAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MemberOnlineAmount != 0 {
		n += 1 + sovTx(uint64(m.MemberOnlineAmount))
	}
	l = len(m.GatewayAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GatewaySign)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateClusterAddMembers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GateAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.SalaryRatio.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.BurnAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.ChatAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.FreezeAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.ClusterDaoRatio.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.MemberOnlineAmount != 0 {
		n += 1 + sovTx(uint64(m.MemberOnlineAmount))
	}
	l = len(m.OwnerIndexNum)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GatewaySign)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgReturnRedPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Fromaddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Redpacketid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgOpenRedPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Fromaddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Redpacketid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRedPacketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Clusterid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRedPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Fromaddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Clusterid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.Count != 0 {
		n += 1 + sovTx(uint64(m.Count))
	}
	if m.Redtype != 0 {
		n += 1 + sovTx(uint64(m.Redtype))
	}
	return n
}

func (m *MsgAgreeJoinCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IndexNum)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChatAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MemberOnlineAmount != 0 {
		n += 1 + sovTx(uint64(m.MemberOnlineAmount))
	}
	l = len(m.GatewayAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GatewaySign)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgReceiveBurnRewardFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgClusterAd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.ClusterId) > 0 {
		for _, s := range m.ClusterId {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.AdText)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateAdmin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.ClusterAdminList) > 0 {
		for _, s := range m.ClusterAdminList {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgClusterChangeName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClusterMemberExit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MemberOnlineAmount != 0 {
		n += 1 + sovTx(uint64(m.MemberOnlineAmount))
	}
	l = len(m.GatewayAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GatewaySign)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgThawFrozenPower) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.ThawAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.GatewayAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChatAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteMembers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Members) > 0 {
		for _, s := range m.Members {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.MemberOnlineAmount != 0 {
		n += 1 + sovTx(uint64(m.MemberOnlineAmount))
	}
	l = len(m.GatewayAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GatewaySign)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawOwnerReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawSwapDpos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MemberAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DaoNum)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawDeviceReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MemberAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgColonyRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GatewayAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.OnlineRate) > 0 {
		for _, e := range m.OnlineRate {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *ColonyRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Rate.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCreateCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GateAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.SalaryRatio.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.BurnAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.ChatAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.FreezeAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.ClusterDaoRatio.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgClusterAddMembers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *Members) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MemberAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IndexNum)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChatAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBurnToPower) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.BurnAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.UseFreezeAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.GatewayAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChatAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClusterChangeSalaryRatio) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.SalaryRatio.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgClusterChangeDvmRatio) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.DvmRatio.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgClusterChangeDaoRatio) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.DaoRatio.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgClusterChangeId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewClusterId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClusterPowerApprove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApproveAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ApproveEndBlock)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPersonDvmApprove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApproveAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ApproveEndBlock)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgEmptyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgReceivePowerCutReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReceivePowerCutReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReceivePowerCutReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStartPowerRewardRedeem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStartPowerRewardRedeem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStartPowerRewardRedeem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAgreeJoinClusterApply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAgreeJoinClusterApply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAgreeJoinClusterApply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberOnlineAmount", wireType)
			}
			m.MemberOnlineAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberOnlineAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewaySign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewaySign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateClusterAddMembers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateClusterAddMembers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateClusterAddMembers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GateAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GateAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SalaryRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SalaryRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreezeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FreezeAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterDaoRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClusterDaoRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, Members{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberOnlineAmount", wireType)
			}
			m.MemberOnlineAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberOnlineAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerIndexNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerIndexNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewaySign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewaySign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReturnRedPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReturnRedPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReturnRedPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromaddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fromaddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redpacketid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Redpacketid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOpenRedPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOpenRedPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOpenRedPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromaddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fromaddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redpacketid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Redpacketid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRedPacketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRedPacketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRedPacketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clusterid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clusterid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRedPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRedPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRedPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fromaddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fromaddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clusterid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clusterid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redtype", wireType)
			}
			m.Redtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Redtype |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAgreeJoinCluster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAgreeJoinCluster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAgreeJoinCluster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberOnlineAmount", wireType)
			}
			m.MemberOnlineAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberOnlineAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewaySign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewaySign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReceiveBurnRewardFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReceiveBurnRewardFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReceiveBurnRewardFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClusterAd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClusterAd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClusterAd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = append(m.ClusterId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAdmin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterAdminList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterAdminList = append(m.ClusterAdminList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClusterChangeName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClusterChangeName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClusterChangeName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClusterMemberExit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClusterMemberExit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClusterMemberExit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberOnlineAmount", wireType)
			}
			m.MemberOnlineAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberOnlineAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewaySign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewaySign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgThawFrozenPower) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgThawFrozenPower: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgThawFrozenPower: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThawAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ThawAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteMembers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteMembers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteMembers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberOnlineAmount", wireType)
			}
			m.MemberOnlineAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberOnlineAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewaySign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewaySign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawOwnerReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawOwnerReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawOwnerReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawSwapDpos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawSwapDpos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawSwapDpos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaoNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DaoNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawDeviceReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawDeviceReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawDeviceReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgColonyRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgColonyRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgColonyRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnlineRate = append(m.OnlineRate, ColonyRate{})
			if err := m.OnlineRate[len(m.OnlineRate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColonyRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColonyRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColonyRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCluster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCluster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCluster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GateAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GateAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SalaryRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SalaryRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreezeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FreezeAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterDaoRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClusterDaoRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClusterAddMembers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClusterAddMembers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClusterAddMembers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, Members{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Members) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Members: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Members: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnToPower) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnToPower: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnToPower: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseFreezeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UseFreezeAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClusterChangeSalaryRatio) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClusterChangeSalaryRatio: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClusterChangeSalaryRatio: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SalaryRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SalaryRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClusterChangeDvmRatio) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClusterChangeDvmRatio: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClusterChangeDvmRatio: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DvmRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DvmRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClusterChangeDaoRatio) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClusterChangeDaoRatio: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClusterChangeDaoRatio: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaoRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DaoRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClusterChangeId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClusterChangeId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClusterChangeId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClusterPowerApprove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClusterPowerApprove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClusterPowerApprove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApproveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproveEndBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApproveEndBlock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPersonDvmApprove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPersonDvmApprove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPersonDvmApprove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApproveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproveEndBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApproveEndBlock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEmptyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEmptyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEmptyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
