// Code generated by protoc-gen-gogo. DO NOT EDIT.

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/duration"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

const _ = proto.GoGoProtoPackageIsVersion3 

type Params struct {
	
	Rate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=rate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"rate"`
	
	SalaryRewardRatio RatioLimit `protobuf:"bytes,2,opt,name=salary_reward_ratio,json=salaryRewardRatio,proto3" json:"salary_reward_ratio" yaml:"salary_reward_ratio"`
	
	DvmRewardRatio RatioLimit `protobuf:"bytes,3,opt,name=dvm_reward_ratio,json=dvmRewardRatio,proto3" json:"dvm_reward_ratio" yaml:"dvm_reward_ratio"`
	
	BurnGetPowerRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=burn_get_power_ratio,json=burnGetPowerRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"burn_get_power_ratio" yaml:"burn_get_power_ratio"`
	
	ClusterLevels []ClusterLevel `protobuf:"bytes,5,rep,name=cluster_levels,json=clusterLevels,proto3" json:"cluster_levels" yaml:"cluster_levels"`
	
	MaxClusterMembers int64 `protobuf:"varint,6,opt,name=max_cluster_members,json=maxClusterMembers,proto3" json:"max_cluster_members,omitempty" yaml:"max_cluster_members"`
	
	DaoRewardPercent github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=dao_reward_percent,json=daoRewardPercent,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"dao_reward_percent" yaml:"dao_reward_percent"`
	
	DposRewardPercent github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,9,opt,name=dpos_reward_percent,json=dposRewardPercent,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"dpos_reward_percent" yaml:"dpos_reward_percent"`
	
	BurnCurrentGateRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,10,opt,name=burn_current_gate_ratio,json=burnCurrentGateRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"burn_current_gate_ratio" yaml:"burn_current_gate_ratio"`
	
	BurnRegisterGateRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,11,opt,name=burn_register_gate_ratio,json=burnRegisterGateRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"burn_register_gate_ratio" yaml:"burn_register_gate_ratio"`
	
	DayMintAmount github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,12,opt,name=day_mint_amount,json=dayMintAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"day_mint_amount" yaml:"day_mint_amount"`
	
	BurnLevels []BurnLevel `protobuf:"bytes,13,rep,name=burnLevels,proto3" json:"burnLevels"`
	
	PowerGasRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,14,opt,name=power_gas_ratio,json=powerGasRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"power_gas_ratio" yaml:"power_gas_ratio"`
	
	AdPrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,15,opt,name=ad_price,json=adPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"ad_price"`
	
	AdRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,16,opt,name=ad_rate,json=adRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"ad_rate"`
	
	BurnRewardFeeRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,17,opt,name=burn_reward_fee_rate,json=burnRewardFeeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"burn_reward_fee_rate"`
	
	ReceiveDaoRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,18,opt,name=receive_dao_ratio,json=receiveDaoRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"receive_dao_ratio"`
	
	ConnectivityDaoRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,19,opt,name=connectivity_dao_ratio,json=connectivityDaoRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"connectivity_dao_ratio"`
	
	BurnDaoPool github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,20,opt,name=burn_dao_pool,json=burnDaoPool,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"burn_dao_pool"`
	
	DaoRewardRatio RatioLimit `protobuf:"bytes,21,opt,name=dao_reward_ratio,json=daoRewardRatio,proto3" json:"dao_reward_ratio" yaml:"dao_reward_ratio"`
	
	MaxOnlineRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,22,opt,name=max_online_ratio,json=maxOnlineRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_online_ratio" yaml:"max_dao_reward_ratio"`
	
	VotingPeriod time.Duration `protobuf:"bytes,23,opt,name=voting_period,json=votingPeriod,proto3,stdduration" json:"voting_period"`
	
	MintBlockInterval int64 `protobuf:"varint,24,opt,name=mint_block_interval,json=mintBlockInterval,proto3" json:"mint_block_interval,omitempty" yaml:"mint_block_interval"`
	
	CrossFee CrossFee `protobuf:"bytes,25,opt,name=cross_fee,json=crossFee,proto3" json:"cross_fee" yaml:"cross_fee"`
	
	TranslateMin github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,27,opt,name=translate_min,json=translateMin,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"translate_min"`
	
	DaoIncreaseRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,28,opt,name=dao_increase_ratio,json=daoIncreaseRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"dao_increase_ratio"`
	
	DaoIncreaseHeight int64 `protobuf:"varint,29,opt,name=dao_increase_height,json=daoIncreaseHeight,proto3" json:"dao_increase_height,omitempty" yaml:"dao_increase_height"`
	
	IdoMinMember int64 `protobuf:"varint,30,opt,name=ido_min_member,json=idoMinMember,proto3" json:"ido_min_member,omitempty" yaml:"ido_min_member"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_8679b07c520418a1, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetSalaryRewardRatio() RatioLimit {
	if m != nil {
		return m.SalaryRewardRatio
	}
	return RatioLimit{}
}

func (m *Params) GetDvmRewardRatio() RatioLimit {
	if m != nil {
		return m.DvmRewardRatio
	}
	return RatioLimit{}
}

func (m *Params) GetClusterLevels() []ClusterLevel {
	if m != nil {
		return m.ClusterLevels
	}
	return nil
}

func (m *Params) GetMaxClusterMembers() int64 {
	if m != nil {
		return m.MaxClusterMembers
	}
	return 0
}

func (m *Params) GetBurnLevels() []BurnLevel {
	if m != nil {
		return m.BurnLevels
	}
	return nil
}

func (m *Params) GetDaoRewardRatio() RatioLimit {
	if m != nil {
		return m.DaoRewardRatio
	}
	return RatioLimit{}
}

func (m *Params) GetVotingPeriod() time.Duration {
	if m != nil {
		return m.VotingPeriod
	}
	return 0
}

func (m *Params) GetMintBlockInterval() int64 {
	if m != nil {
		return m.MintBlockInterval
	}
	return 0
}

func (m *Params) GetCrossFee() CrossFee {
	if m != nil {
		return m.CrossFee
	}
	return CrossFee{}
}

func (m *Params) GetDaoIncreaseHeight() int64 {
	if m != nil {
		return m.DaoIncreaseHeight
	}
	return 0
}

func (m *Params) GetIdoMinMember() int64 {
	if m != nil {
		return m.IdoMinMember
	}
	return 0
}

type BurnLevel struct {
	Level      int64                                  `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty" yaml:"level"`
	BurnAmount github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=burn_amount,json=burnAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"burn_amount" yaml:"burn_amount"`
	AddPercent github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=add_percent,json=addPercent,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"add_percent" yaml:"add_percent"`
	RoomAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=room_amount,json=roomAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"room_amount" yaml:"room_amount"`
}

func (m *BurnLevel) Reset()         { *m = BurnLevel{} }
func (m *BurnLevel) String() string { return proto.CompactTextString(m) }
func (*BurnLevel) ProtoMessage()    {}
func (*BurnLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_8679b07c520418a1, []int{1}
}
func (m *BurnLevel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BurnLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BurnLevel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BurnLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BurnLevel.Merge(m, src)
}
func (m *BurnLevel) XXX_Size() int {
	return m.Size()
}
func (m *BurnLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_BurnLevel.DiscardUnknown(m)
}

var xxx_messageInfo_BurnLevel proto.InternalMessageInfo

func (m *BurnLevel) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

type ClusterLevel struct {
	Level        int64                                  `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty" yaml:"level"`
	BurnAmount   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=burn_amount,json=burnAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"burn_amount"`
	DaoLimit     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=dao_limit,json=daoLimit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"dao_limit"`
	MemberAmount int64                                  `protobuf:"varint,4,opt,name=member_amount,json=memberAmount,proto3" json:"member_amount,omitempty" yaml:"member_amount"`
}

func (m *ClusterLevel) Reset()         { *m = ClusterLevel{} }
func (m *ClusterLevel) String() string { return proto.CompactTextString(m) }
func (*ClusterLevel) ProtoMessage()    {}
func (*ClusterLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_8679b07c520418a1, []int{2}
}
func (m *ClusterLevel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterLevel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterLevel.Merge(m, src)
}
func (m *ClusterLevel) XXX_Size() int {
	return m.Size()
}
func (m *ClusterLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterLevel.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterLevel proto.InternalMessageInfo

func (m *ClusterLevel) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *ClusterLevel) GetMemberAmount() int64 {
	if m != nil {
		return m.MemberAmount
	}
	return 0
}

type RatioLimit struct {
	MaxRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=max_ratio,json=maxRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_ratio" yaml:"max_ratio"`
	MinRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=min_ratio,json=minRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"min_ratio" yaml:"min_ratio"`
}

func (m *RatioLimit) Reset()         { *m = RatioLimit{} }
func (m *RatioLimit) String() string { return proto.CompactTextString(m) }
func (*RatioLimit) ProtoMessage()    {}
func (*RatioLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_8679b07c520418a1, []int{3}
}
func (m *RatioLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RatioLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RatioLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RatioLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RatioLimit.Merge(m, src)
}
func (m *RatioLimit) XXX_Size() int {
	return m.Size()
}
func (m *RatioLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_RatioLimit.DiscardUnknown(m)
}

var xxx_messageInfo_RatioLimit proto.InternalMessageInfo

type CrossFee struct {
	FeeCollectionAccount string                                 `protobuf:"bytes,1,opt,name=fee_collection_account,json=feeCollectionAccount,proto3" json:"fee_collection_account,omitempty" yaml:"fee_collection_account"`
	FeeAmount            github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=fee_amount,json=feeAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"fee_amount" yaml:"fee_amount"`
}

func (m *CrossFee) Reset()         { *m = CrossFee{} }
func (m *CrossFee) String() string { return proto.CompactTextString(m) }
func (*CrossFee) ProtoMessage()    {}
func (*CrossFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_8679b07c520418a1, []int{4}
}
func (m *CrossFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossFee.Merge(m, src)
}
func (m *CrossFee) XXX_Size() int {
	return m.Size()
}
func (m *CrossFee) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossFee.DiscardUnknown(m)
}

var xxx_messageInfo_CrossFee proto.InternalMessageInfo

func (m *CrossFee) GetFeeCollectionAccount() string {
	if m != nil {
		return m.FeeCollectionAccount
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "freemasonry.dao.v1.Params")
	proto.RegisterType((*BurnLevel)(nil), "freemasonry.dao.v1.BurnLevel")
	proto.RegisterType((*ClusterLevel)(nil), "freemasonry.dao.v1.ClusterLevel")
	proto.RegisterType((*RatioLimit)(nil), "freemasonry.dao.v1.RatioLimit")
	proto.RegisterType((*CrossFee)(nil), "freemasonry.dao.v1.CrossFee")
}

func init() { proto.RegisterFile("params.proto", fileDescriptor_8679b07c520418a1) }

var fileDescriptor_8679b07c520418a1 = []byte{
	
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0x8e, 0x93, 0x34, 0xb5, 0x27, 0x76, 0x6a, 0x6f, 0x7e, 0x74, 0xd3, 0x36, 0x76, 0x18, 0x89,
	0x2a, 0x97, 0xda, 0xa2, 0xdc, 0x10, 0xa8, 0xea, 0x26, 0x6a, 0x1a, 0xd1, 0x14, 0x33, 0x3d, 0x20,
	0x2a, 0xd0, 0x6a, 0xbc, 0x3b, 0x76, 0x46, 0xdd, 0x9d, 0xb1, 0x66, 0xc7, 0x6e, 0x2c, 0x21, 0xae,
	0x48, 0x9c, 0x38, 0xf2, 0x5f, 0x70, 0xe1, 0xcc, 0x95, 0x9e, 0x50, 0xc5, 0x09, 0x71, 0x30, 0xa8,
	0xb9, 0x70, 0xce, 0x5f, 0x80, 0xe6, 0xc7, 0xc6, 0xeb, 0x64, 0x0f, 0xb5, 0x73, 0x4a, 0xf6, 0xcd,
	0x9b, 0xef, 0x7b, 0xf3, 0xe6, 0xcd, 0xf7, 0x9e, 0x41, 0xb9, 0x8f, 0x05, 0x8e, 0x93, 0x66, 0x5f,
	0x70, 0xc9, 0x1d, 0xa7, 0x2b, 0x08, 0x89, 0x71, 0xc2, 0x99, 0x18, 0x35, 0x43, 0xcc, 0x9b, 0xc3,
	0x8f, 0xee, 0x6c, 0xf4, 0x78, 0x8f, 0xeb, 0xe5, 0x96, 0xfa, 0xcf, 0x78, 0xde, 0xd9, 0x0e, 0x78,
	0x12, 0xf3, 0xc4, 0x37, 0x0b, 0xe6, 0xc3, 0x2e, 0xd5, 0x7b, 0x9c, 0xf7, 0x22, 0xd2, 0xd2, 0x5f,
	0x9d, 0x41, 0xb7, 0x15, 0x0e, 0x04, 0x96, 0x94, 0x33, 0xb3, 0x0e, 0x7f, 0xdb, 0x04, 0x2b, 0x6d,
	0xcd, 0xea, 0x78, 0x60, 0x59, 0x60, 0x49, 0xdc, 0xc2, 0x6e, 0x61, 0xaf, 0xe4, 0x35, 0xdf, 0x8c,
	0x1b, 0x0b, 0x7f, 0x8f, 0x1b, 0xf7, 0x7b, 0x54, 0x9e, 0x0c, 0x3a, 0xcd, 0x80, 0xc7, 0x16, 0xd9,
	0xfe, 0x79, 0x90, 0x84, 0xaf, 0x5a, 0x72, 0xd4, 0x27, 0x49, 0xf3, 0x80, 0x04, 0x48, 0xef, 0x75,
	0x04, 0x58, 0x4f, 0x70, 0x84, 0xc5, 0xc8, 0x17, 0xe4, 0x35, 0x16, 0xa1, 0xaf, 0xc9, 0xdc, 0xc5,
	0xdd, 0xc2, 0xde, 0xea, 0xc3, 0x7a, 0xf3, 0xea, 0x89, 0x9a, 0x48, 0x39, 0x3c, 0xa3, 0x31, 0x95,
	0x1e, 0x54, 0x94, 0xe7, 0xe3, 0xc6, 0x9d, 0x11, 0x8e, 0xa3, 0x4f, 0x60, 0x0e, 0x10, 0x44, 0x35,
	0x63, 0x45, 0xda, 0xa8, 0xf7, 0x3a, 0x14, 0x54, 0xc3, 0x61, 0x3c, 0x4d, 0xb8, 0xf4, 0x5e, 0x84,
	0x0d, 0x4b, 0x78, 0xdb, 0x10, 0x5e, 0x46, 0x81, 0x68, 0x2d, 0x1c, 0xc6, 0x59, 0xaa, 0xef, 0xc1,
	0x46, 0x67, 0x20, 0x98, 0xdf, 0x23, 0xd2, 0xef, 0xf3, 0xd7, 0x44, 0x58, 0xba, 0x65, 0x9d, 0xb2,
	0xe3, 0xd9, 0x52, 0x76, 0x3e, 0x6e, 0xdc, 0x35, 0xc4, 0x79, 0x98, 0x10, 0xd5, 0x94, 0xf9, 0x90,
	0xc8, 0xb6, 0x32, 0x1a, 0xfe, 0x2e, 0x58, 0x0b, 0xa2, 0x41, 0x22, 0x89, 0xf0, 0x23, 0x32, 0x24,
	0x51, 0xe2, 0xde, 0xd8, 0x5d, 0xda, 0x5b, 0x7d, 0xb8, 0x9b, 0x77, 0xd0, 0x7d, 0xe3, 0xf9, 0x4c,
	0x39, 0x7a, 0x3b, 0xf6, 0xa8, 0x9b, 0x86, 0x71, 0x1a, 0x05, 0xa2, 0x4a, 0x90, 0x71, 0x4e, 0x9c,
	0xe7, 0x60, 0x3d, 0xc6, 0xa7, 0x7e, 0xea, 0x15, 0x93, 0xb8, 0x43, 0x44, 0xe2, 0xae, 0xec, 0x16,
	0xf6, 0x96, 0xbc, 0xfa, 0xe4, 0x8a, 0x72, 0x9c, 0x20, 0xaa, 0xc5, 0xf8, 0xd4, 0x72, 0x1f, 0x1b,
	0x9b, 0x33, 0x02, 0x4e, 0x88, 0x79, 0x9a, 0xdc, 0x3e, 0x11, 0x01, 0x61, 0xd2, 0x2d, 0xea, 0xac,
	0x7d, 0x3e, 0x73, 0xd6, 0xb6, 0xed, 0x75, 0x5d, 0x41, 0x84, 0xa8, 0x1a, 0x62, 0x6e, 0x2e, 0xac,
	0x6d, 0x4c, 0xce, 0x77, 0x60, 0x3d, 0xec, 0xf3, 0xe4, 0x32, 0x77, 0x49, 0x73, 0x3f, 0x9b, 0x99,
	0xdb, 0x1e, 0x3c, 0x07, 0x12, 0xa2, 0x9a, 0xb2, 0x4e, 0xb3, 0xff, 0x50, 0x00, 0xb7, 0xf5, 0xed,
	0x06, 0x03, 0x21, 0x08, 0x93, 0x7e, 0x0f, 0x4b, 0x62, 0x8b, 0x06, 0xe8, 0x10, 0xda, 0x33, 0x87,
	0x50, 0xcf, 0x14, 0xcd, 0x55, 0x58, 0x88, 0x74, 0x89, 0xee, 0x9b, 0x85, 0x43, 0x2c, 0x89, 0x29,
	0x9d, 0x1f, 0x0b, 0xc0, 0xd5, 0x5b, 0x04, 0xe9, 0x51, 0x7d, 0x61, 0x99, 0x50, 0x56, 0x75, 0x28,
	0x5f, 0xce, 0x1c, 0x4a, 0x23, 0x13, 0x4a, 0x0e, 0x2e, 0x44, 0x9b, 0x6a, 0x09, 0xd9, 0x95, 0x49,
	0x30, 0x7d, 0x70, 0x2b, 0xc4, 0x23, 0x3f, 0xa6, 0x4c, 0xfa, 0x38, 0xe6, 0x03, 0x26, 0xdd, 0xb2,
	0x0e, 0xe1, 0xe9, 0xcc, 0x21, 0x6c, 0xa5, 0xc5, 0x30, 0x05, 0x07, 0x51, 0x25, 0xc4, 0xa3, 0x63,
	0xca, 0xe4, 0x63, 0xfd, 0xed, 0xec, 0x03, 0xa0, 0x42, 0x31, 0xf5, 0xed, 0x56, 0xf4, 0xab, 0xd9,
	0xc9, 0x7b, 0x35, 0x5e, 0xea, 0xe5, 0x2d, 0xab, 0x58, 0x50, 0x66, 0x9b, 0x0a, 0xdb, 0xbc, 0xd0,
	0x1e, 0x4e, 0x6c, 0xe6, 0xd6, 0xae, 0x17, 0xf6, 0x25, 0x38, 0x88, 0x2a, 0xda, 0x72, 0x88, 0x13,
	0x93, 0xa8, 0x23, 0x50, 0xc4, 0xa1, 0xdf, 0x17, 0x34, 0x20, 0xee, 0xad, 0xb9, 0x74, 0xf9, 0x26,
	0x0e, 0xdb, 0x6a, 0xbb, 0x73, 0x08, 0x6e, 0x62, 0x2d, 0x6c, 0xc4, 0xad, 0xce, 0x85, 0xb4, 0x82,
	0x95, 0x0a, 0x12, 0xc7, 0xb7, 0x22, 0x68, 0xcb, 0xbf, 0x4b, 0x88, 0x41, 0xad, 0xcd, 0x85, 0x5a,
	0x33, 0x15, 0xa2, 0xa0, 0x9e, 0x10, 0xa2, 0x09, 0x5e, 0x82, 0x9a, 0x20, 0x01, 0xa1, 0x43, 0xe2,
	0xeb, 0x37, 0xae, 0x13, 0xed, 0xcc, 0x85, 0x7e, 0xcb, 0x02, 0x1d, 0x60, 0x6e, 0x12, 0x1a, 0x82,
	0xad, 0x80, 0x33, 0x46, 0x02, 0x49, 0x87, 0x54, 0x8e, 0x32, 0x04, 0xeb, 0x73, 0x11, 0x6c, 0x64,
	0xd1, 0x2e, 0x58, 0x10, 0xa8, 0xe8, 0x14, 0x29, 0xf4, 0x3e, 0xe7, 0x91, 0xbb, 0x31, 0x17, 0xf8,
	0xaa, 0x02, 0x39, 0xc0, 0xbc, 0xcd, 0x79, 0xa4, 0xdb, 0xdc, 0x44, 0xf1, 0x4c, 0xcc, 0x9b, 0x73,
	0xb5, 0xb9, 0x4b, 0x28, 0xaa, 0xcd, 0xa5, 0xaa, 0x69, 0xc2, 0x7f, 0x0d, 0xaa, 0x4a, 0xd9, 0x39,
	0x8b, 0x28, 0x4b, 0x25, 0x62, 0xeb, 0x7a, 0x2d, 0x4e, 0xe1, 0xe5, 0x10, 0xc7, 0xf8, 0xf4, 0x0b,
	0xcd, 0x62, 0x88, 0x9f, 0x82, 0xca, 0x90, 0x4b, 0xca, 0x7a, 0x4a, 0x54, 0x29, 0x0f, 0xdd, 0xdb,
	0xfa, 0x80, 0xdb, 0x4d, 0x33, 0xc5, 0x34, 0xd3, 0x29, 0xa6, 0x79, 0x60, 0xa7, 0x18, 0xaf, 0xa8,
	0x02, 0xfa, 0xf9, 0x9f, 0x46, 0x01, 0x95, 0xcd, 0xce, 0xb6, 0xde, 0xa8, 0x3b, 0x98, 0x92, 0x83,
	0x4e, 0xc4, 0x83, 0x57, 0x3e, 0x65, 0x92, 0x88, 0x21, 0x8e, 0x5c, 0xf7, 0x4a, 0x07, 0xbb, 0xea,
	0xa4, 0x3a, 0x18, 0x65, 0xd2, 0x53, 0xc6, 0x23, 0x6b, 0x73, 0x5e, 0x80, 0x52, 0x20, 0x78, 0x92,
	0xa8, 0x72, 0x77, 0xb7, 0x75, 0x54, 0xf7, 0x72, 0x9b, 0xae, 0x72, 0x7a, 0x42, 0x88, 0xe7, 0xda,
	0xa4, 0x57, 0x6d, 0xc3, 0x4d, 0x37, 0x43, 0x54, 0x0c, 0xac, 0x8f, 0xf3, 0x02, 0x54, 0xa4, 0xc0,
	0x2c, 0x89, 0x94, 0x62, 0xc6, 0x94, 0xb9, 0x77, 0xe7, 0x2a, 0x93, 0xf2, 0x05, 0xc8, 0x31, 0x65,
	0xce, 0x37, 0xa6, 0xd7, 0x52, 0x16, 0x08, 0x82, 0x93, 0xf4, 0xfa, 0xee, 0xcd, 0x85, 0xac, 0x2a,
	0xee, 0xc8, 0x02, 0x99, 0x1b, 0x7a, 0x0e, 0xd6, 0xa7, 0xd0, 0x4f, 0x08, 0xed, 0x9d, 0x48, 0x77,
	0xe7, 0x72, 0x5e, 0x73, 0x9c, 0x54, 0x83, 0x9c, 0xc0, 0x3d, 0xd5, 0x36, 0xe7, 0x11, 0x58, 0xa3,
	0x21, 0x57, 0x87, 0xb7, 0x03, 0x84, 0x5b, 0xd7, 0x50, 0xdb, 0x93, 0x59, 0x65, 0x7a, 0x1d, 0xa2,
	0x32, 0x0d, 0xf9, 0x31, 0x65, 0x66, 0xb6, 0x80, 0xff, 0x2d, 0x82, 0xd2, 0x85, 0x66, 0x3b, 0xf7,
	0xc1, 0x0d, 0x3d, 0xd2, 0xe8, 0x21, 0x76, 0xc9, 0xab, 0x9e, 0x8f, 0x1b, 0x65, 0x83, 0xa2, 0xcd,
	0x10, 0x99, 0x65, 0x87, 0x00, 0xfd, 0xb6, 0xd2, 0xe6, 0xb3, 0xa8, 0xb3, 0x73, 0x30, 0x73, 0x71,
	0x3b, 0x99, 0xfe, 0x97, 0x36, 0x1e, 0xdd, 0x30, 0x6c, 0xd7, 0x21, 0x60, 0x15, 0x87, 0x93, 0xa1,
	0x63, 0x69, 0x66, 0x9a, 0x23, 0x26, 0x27, 0x34, 0x19, 0x28, 0x88, 0x00, 0x0e, 0x2f, 0xa6, 0x0c,
	0x02, 0x56, 0x05, 0xe7, 0x71, 0x7a, 0x9a, 0xe5, 0xeb, 0xd1, 0x64, 0xa0, 0x20, 0x02, 0xea, 0xcb,
	0x9c, 0x06, 0xfe, 0xb2, 0x08, 0xca, 0xd9, 0xa1, 0xf2, 0xbd, 0xb3, 0xfd, 0x6d, 0x5e, 0xb6, 0x3f,
	0x9d, 0x2d, 0xbe, 0x3f, 0x7f, 0x7d, 0x00, 0xec, 0x2f, 0x9b, 0x23, 0x26, 0xa7, 0xb2, 0xfc, 0x35,
	0x28, 0xa9, 0x72, 0x8b, 0x94, 0xd8, 0xd9, 0x1c, 0x5f, 0x0f, 0xbc, 0x18, 0x62, 0x23, 0x9d, 0xce,
	0x67, 0xa0, 0x62, 0xca, 0x2e, 0x9b, 0xdb, 0x25, 0xcf, 0x3d, 0x1f, 0x37, 0x36, 0xac, 0x80, 0x64,
	0x97, 0x21, 0x2a, 0x9b, 0x6f, 0x9b, 0xb1, 0x3f, 0x0a, 0x00, 0x4c, 0x84, 0xd8, 0xf1, 0x41, 0x49,
	0xe9, 0xa0, 0x79, 0x91, 0xe6, 0x67, 0x96, 0x37, 0x73, 0xcd, 0x55, 0x27, 0x82, 0x6a, 0x55, 0xb4,
	0x18, 0xe3, 0x53, 0xf3, 0x3a, 0x15, 0x01, 0x65, 0x99, 0x1f, 0x5d, 0xd7, 0x21, 0x48, 0x81, 0x14,
	0x01, 0x65, 0x9a, 0x00, 0xfe, 0x5e, 0x00, 0xc5, 0x54, 0xe2, 0x9c, 0xaf, 0xc0, 0x96, 0x6a, 0xfe,
	0x01, 0x8f, 0x22, 0xd5, 0x01, 0x39, 0xf3, 0x71, 0x10, 0xe8, 0x2c, 0x99, 0xb3, 0x7d, 0x70, 0x3e,
	0x6e, 0xec, 0x18, 0xb0, 0x7c, 0x3f, 0x88, 0x36, 0xba, 0x84, 0xec, 0x5f, 0xd8, 0x1f, 0x1b, 0xb3,
	0xd3, 0x01, 0x40, 0x6d, 0x98, 0x2a, 0x97, 0xfd, 0x99, 0xcb, 0xb9, 0x36, 0xa1, 0x4e, 0x6f, 0xa7,
	0xd4, 0x25, 0xc4, 0x5c, 0x8d, 0xf7, 0xe8, 0xcd, 0xbb, 0x7a, 0xe1, 0xed, 0xbb, 0x7a, 0xe1, 0xdf,
	0x77, 0xf5, 0xc2, 0x4f, 0x67, 0xf5, 0x85, 0xb7, 0x67, 0xf5, 0x85, 0xbf, 0xce, 0xea, 0x0b, 0x2f,
	0x3f, 0xcc, 0xca, 0x7a, 0x10, 0xb4, 0x74, 0x77, 0x08, 0x4e, 0x30, 0x65, 0xad, 0xd3, 0x56, 0x88,
	0xb9, 0x21, 0xe9, 0xac, 0xe8, 0x66, 0xf4, 0xf1, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xfc,
	0x1f, 0x10, 0xb5, 0x0f, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IdoMinMember != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.IdoMinMember))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.DaoIncreaseHeight != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.DaoIncreaseHeight))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	{
		size := m.DaoIncreaseRatio.Size()
		i -= size
		if _, err := m.DaoIncreaseRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe2
	{
		size := m.TranslateMin.Size()
		i -= size
		if _, err := m.TranslateMin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xda
	{
		size, err := m.CrossFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xca
	if m.MintBlockInterval != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MintBlockInterval))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.VotingPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.VotingPeriod):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintParams(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xba
	{
		size := m.MaxOnlineRatio.Size()
		i -= size
		if _, err := m.MaxOnlineRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb2
	{
		size, err := m.DaoRewardRatio.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	{
		size := m.BurnDaoPool.Size()
		i -= size
		if _, err := m.BurnDaoPool.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa2
	{
		size := m.ConnectivityDaoRatio.Size()
		i -= size
		if _, err := m.ConnectivityDaoRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x9a
	{
		size := m.ReceiveDaoRatio.Size()
		i -= size
		if _, err := m.ReceiveDaoRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	{
		size := m.BurnRewardFeeRate.Size()
		i -= size
		if _, err := m.BurnRewardFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	{
		size := m.AdRate.Size()
		i -= size
		if _, err := m.AdRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size := m.AdPrice.Size()
		i -= size
		if _, err := m.AdPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	{
		size := m.PowerGasRatio.Size()
		i -= size
		if _, err := m.PowerGasRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	if len(m.BurnLevels) > 0 {
		for iNdEx := len(m.BurnLevels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BurnLevels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	{
		size := m.DayMintAmount.Size()
		i -= size
		if _, err := m.DayMintAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.BurnRegisterGateRatio.Size()
		i -= size
		if _, err := m.BurnRegisterGateRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.BurnCurrentGateRatio.Size()
		i -= size
		if _, err := m.BurnCurrentGateRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.DposRewardPercent.Size()
		i -= size
		if _, err := m.DposRewardPercent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.DaoRewardPercent.Size()
		i -= size
		if _, err := m.DaoRewardPercent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.MaxClusterMembers != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxClusterMembers))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ClusterLevels) > 0 {
		for iNdEx := len(m.ClusterLevels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClusterLevels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size := m.BurnGetPowerRatio.Size()
		i -= size
		if _, err := m.BurnGetPowerRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.DvmRewardRatio.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.SalaryRewardRatio.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Rate.Size()
		i -= size
		if _, err := m.Rate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BurnLevel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BurnLevel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BurnLevel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RoomAmount.Size()
		i -= size
		if _, err := m.RoomAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.AddPercent.Size()
		i -= size
		if _, err := m.AddPercent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.BurnAmount.Size()
		i -= size
		if _, err := m.BurnAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Level != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClusterLevel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterLevel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterLevel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MemberAmount != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MemberAmount))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.DaoLimit.Size()
		i -= size
		if _, err := m.DaoLimit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.BurnAmount.Size()
		i -= size
		if _, err := m.BurnAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Level != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RatioLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RatioLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RatioLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinRatio.Size()
		i -= size
		if _, err := m.MinRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.MaxRatio.Size()
		i -= size
		if _, err := m.MaxRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CrossFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.FeeAmount.Size()
		i -= size
		if _, err := m.FeeAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.FeeCollectionAccount) > 0 {
		i -= len(m.FeeCollectionAccount)
		copy(dAtA[i:], m.FeeCollectionAccount)
		i = encodeVarintParams(dAtA, i, uint64(len(m.FeeCollectionAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Rate.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.SalaryRewardRatio.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.DvmRewardRatio.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.BurnGetPowerRatio.Size()
	n += 1 + l + sovParams(uint64(l))
	if len(m.ClusterLevels) > 0 {
		for _, e := range m.ClusterLevels {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if m.MaxClusterMembers != 0 {
		n += 1 + sovParams(uint64(m.MaxClusterMembers))
	}
	l = m.DaoRewardPercent.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.DposRewardPercent.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.BurnCurrentGateRatio.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.BurnRegisterGateRatio.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.DayMintAmount.Size()
	n += 1 + l + sovParams(uint64(l))
	if len(m.BurnLevels) > 0 {
		for _, e := range m.BurnLevels {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = m.PowerGasRatio.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.AdPrice.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.AdRate.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.BurnRewardFeeRate.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.ReceiveDaoRatio.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.ConnectivityDaoRatio.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.BurnDaoPool.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.DaoRewardRatio.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.MaxOnlineRatio.Size()
	n += 2 + l + sovParams(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.VotingPeriod)
	n += 2 + l + sovParams(uint64(l))
	if m.MintBlockInterval != 0 {
		n += 2 + sovParams(uint64(m.MintBlockInterval))
	}
	l = m.CrossFee.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.TranslateMin.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.DaoIncreaseRatio.Size()
	n += 2 + l + sovParams(uint64(l))
	if m.DaoIncreaseHeight != 0 {
		n += 2 + sovParams(uint64(m.DaoIncreaseHeight))
	}
	if m.IdoMinMember != 0 {
		n += 2 + sovParams(uint64(m.IdoMinMember))
	}
	return n
}

func (m *BurnLevel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovParams(uint64(m.Level))
	}
	l = m.BurnAmount.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.AddPercent.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.RoomAmount.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *ClusterLevel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovParams(uint64(m.Level))
	}
	l = m.BurnAmount.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.DaoLimit.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.MemberAmount != 0 {
		n += 1 + sovParams(uint64(m.MemberAmount))
	}
	return n
}

func (m *RatioLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MaxRatio.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MinRatio.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *CrossFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeeCollectionAccount)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = m.FeeAmount.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SalaryRewardRatio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SalaryRewardRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DvmRewardRatio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DvmRewardRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnGetPowerRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnGetPowerRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterLevels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterLevels = append(m.ClusterLevels, ClusterLevel{})
			if err := m.ClusterLevels[len(m.ClusterLevels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxClusterMembers", wireType)
			}
			m.MaxClusterMembers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxClusterMembers |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaoRewardPercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DaoRewardPercent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DposRewardPercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DposRewardPercent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnCurrentGateRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnCurrentGateRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnRegisterGateRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnRegisterGateRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayMintAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DayMintAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnLevels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BurnLevels = append(m.BurnLevels, BurnLevel{})
			if err := m.BurnLevels[len(m.BurnLevels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerGasRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PowerGasRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AdPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AdRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnRewardFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnRewardFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveDaoRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReceiveDaoRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectivityDaoRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConnectivityDaoRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnDaoPool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnDaoPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaoRewardRatio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DaoRewardRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxOnlineRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxOnlineRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.VotingPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintBlockInterval", wireType)
			}
			m.MintBlockInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MintBlockInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CrossFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TranslateMin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TranslateMin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaoIncreaseRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DaoIncreaseRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaoIncreaseHeight", wireType)
			}
			m.DaoIncreaseHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DaoIncreaseHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdoMinMember", wireType)
			}
			m.IdoMinMember = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdoMinMember |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BurnLevel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BurnLevel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BurnLevel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddPercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AddPercent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RoomAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterLevel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterLevel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterLevel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaoLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DaoLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberAmount", wireType)
			}
			m.MemberAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RatioLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RatioLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RatioLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeCollectionAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeCollectionAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
