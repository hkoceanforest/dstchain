// Code generated by protoc-gen-gogo. DO NOT EDIT.

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

const _ = proto.GoGoProtoPackageIsVersion3 

type MsgRegisterErc20 struct {
	Address         string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty" yaml:"contract_address"`
	Denom           string `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
	Owner           int32  `protobuf:"varint,4,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
}

func (m *MsgRegisterErc20) Reset()         { *m = MsgRegisterErc20{} }
func (m *MsgRegisterErc20) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterErc20) ProtoMessage()    {}
func (*MsgRegisterErc20) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{0}
}
func (m *MsgRegisterErc20) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterErc20) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterErc20.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterErc20) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterErc20.Merge(m, src)
}
func (m *MsgRegisterErc20) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterErc20) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterErc20.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterErc20 proto.InternalMessageInfo

type MsgAppTokenIssue struct {
	FromAddress   string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
	Symbol        string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty" yaml:"symbol"`
	PreMintAmount string `protobuf:"bytes,4,opt,name=pre_mint_amount,json=preMintAmount,proto3" json:"pre_mint_amount,omitempty" yaml:"pre_mint_amount"`
	Decimals      string `protobuf:"bytes,5,opt,name=decimals,proto3" json:"decimals,omitempty" yaml:"decimals"`
	LogoUrl       string `protobuf:"bytes,6,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty" yaml:"logo_url"`
}

func (m *MsgAppTokenIssue) Reset()         { *m = MsgAppTokenIssue{} }
func (m *MsgAppTokenIssue) String() string { return proto.CompactTextString(m) }
func (*MsgAppTokenIssue) ProtoMessage()    {}
func (*MsgAppTokenIssue) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{1}
}
func (m *MsgAppTokenIssue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAppTokenIssue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAppTokenIssue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAppTokenIssue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAppTokenIssue.Merge(m, src)
}
func (m *MsgAppTokenIssue) XXX_Size() int {
	return m.Size()
}
func (m *MsgAppTokenIssue) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAppTokenIssue.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAppTokenIssue proto.InternalMessageInfo

func (m *MsgAppTokenIssue) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgAppTokenIssue) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgAppTokenIssue) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *MsgAppTokenIssue) GetPreMintAmount() string {
	if m != nil {
		return m.PreMintAmount
	}
	return ""
}

func (m *MsgAppTokenIssue) GetDecimals() string {
	if m != nil {
		return m.Decimals
	}
	return ""
}

func (m *MsgAppTokenIssue) GetLogoUrl() string {
	if m != nil {
		return m.LogoUrl
	}
	return ""
}

type MsgEmptyResponse struct {
}

func (m *MsgEmptyResponse) Reset()         { *m = MsgEmptyResponse{} }
func (m *MsgEmptyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEmptyResponse) ProtoMessage()    {}
func (*MsgEmptyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{2}
}
func (m *MsgEmptyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEmptyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEmptyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEmptyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEmptyResponse.Merge(m, src)
}
func (m *MsgEmptyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEmptyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEmptyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEmptyResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRegisterErc20)(nil), "freemasonry.contract.v1.MsgRegisterErc20")
	proto.RegisterType((*MsgAppTokenIssue)(nil), "freemasonry.contract.v1.MsgAppTokenIssue")
	proto.RegisterType((*MsgEmptyResponse)(nil), "freemasonry.contract.v1.MsgEmptyResponse")
}

func init() { proto.RegisterFile("tx.proto", fileDescriptor_0fd2153dc07d3b5c) }

var fileDescriptor_0fd2153dc07d3b5c = []byte{
	
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x3f, 0x6f, 0x13, 0x3d,
	0x1c, 0xc7, 0x73, 0x6d, 0x93, 0xa6, 0x6e, 0xf3, 0x24, 0x8f, 0x5b, 0x91, 0x28, 0x48, 0xe7, 0xca,
	0x48, 0xa8, 0xad, 0xd0, 0x1d, 0x2d, 0x5b, 0xb6, 0x44, 0x14, 0x89, 0x21, 0x8b, 0x05, 0x0b, 0x4b,
	0x74, 0xb9, 0xb8, 0x47, 0xd4, 0xb3, 0x7d, 0xb2, 0x9d, 0xd2, 0xac, 0x4c, 0x8c, 0xbc, 0x84, 0xbe,
	0x04, 0xde, 0x03, 0x0b, 0x63, 0x25, 0x16, 0xa6, 0x13, 0x4a, 0x06, 0x98, 0x18, 0xee, 0x15, 0xa0,
	0xb3, 0x73, 0xa8, 0x17, 0x89, 0x4a, 0x4c, 0xb1, 0x7f, 0xdf, 0xcf, 0xf7, 0xf7, 0x2f, 0x3e, 0x50,
	0xd7, 0xd7, 0x5e, 0x22, 0x85, 0x16, 0xb0, 0x7d, 0x21, 0x29, 0x65, 0x81, 0x12, 0x5c, 0xce, 0xbd,
	0x50, 0x70, 0x2d, 0x83, 0x50, 0x7b, 0x57, 0xa7, 0xdd, 0x83, 0x48, 0x44, 0xc2, 0x30, 0x7e, 0x7e,
	0xb2, 0x78, 0xb7, 0x1d, 0x0a, 0xc5, 0x84, 0xf2, 0x99, 0x8a, 0xfc, 0xab, 0xd3, 0xfc, 0xc7, 0x0a,
	0xf8, 0x97, 0x03, 0x5a, 0x43, 0x15, 0x11, 0x1a, 0x4d, 0x95, 0xa6, 0xf2, 0x5c, 0x86, 0x67, 0x4f,
	0xe1, 0x13, 0xb0, 0x1d, 0x4c, 0x26, 0x92, 0x2a, 0xd5, 0x71, 0x0e, 0x9d, 0xa3, 0x9d, 0x01, 0xcc,
	0x52, 0xf4, 0xdf, 0x3c, 0x60, 0x71, 0x0f, 0xaf, 0x04, 0x4c, 0x0a, 0x04, 0xbe, 0x00, 0xad, 0xa2,
	0x81, 0x51, 0x61, 0xdb, 0x30, 0xb6, 0x87, 0x59, 0x8a, 0xda, 0xd6, 0xb6, 0x4e, 0x60, 0xd2, 0x2c,
	0x42, 0xfd, 0x55, 0x9e, 0xc7, 0xa0, 0x3a, 0xa1, 0x5c, 0xb0, 0xce, 0xa6, 0x31, 0xb7, 0xb2, 0x14,
	0xed, 0x59, 0xb3, 0x09, 0x63, 0x62, 0xe5, 0x9c, 0x13, 0xef, 0x38, 0x95, 0x9d, 0xad, 0x43, 0xe7,
	0xa8, 0x7a, 0x97, 0x33, 0x61, 0x4c, 0xac, 0xdc, 0x3b, 0xf8, 0x70, 0x83, 0x2a, 0x3f, 0x6f, 0x50,
	0xe5, 0xfd, 0x8f, 0x4f, 0x27, 0x45, 0xb7, 0xf8, 0xf3, 0x86, 0x19, 0xb8, 0x9f, 0x24, 0xaf, 0xc4,
	0x25, 0xe5, 0x2f, 0x95, 0x9a, 0x51, 0xd8, 0x03, 0x7b, 0x17, 0x52, 0xb0, 0x51, 0x79, 0xea, 0x76,
	0x96, 0xa2, 0x7d, 0x9b, 0xf9, 0xae, 0x8a, 0xc9, 0x6e, 0x7e, 0x2d, 0xda, 0x7e, 0x04, 0xb6, 0x78,
	0xc0, 0xe8, 0x6a, 0xe4, 0x66, 0x96, 0xa2, 0x5d, 0xeb, 0xc9, 0xa3, 0x98, 0x18, 0x11, 0x1e, 0x83,
	0x9a, 0x9a, 0xb3, 0xb1, 0x88, 0x57, 0xc3, 0xfd, 0x9f, 0xa5, 0xa8, 0x61, 0x31, 0x1b, 0xc7, 0x64,
	0x05, 0xc0, 0x01, 0x68, 0x26, 0x92, 0x8e, 0xd8, 0x94, 0xeb, 0x51, 0xc0, 0xc4, 0x8c, 0x6b, 0x33,
	0xe8, 0xce, 0xa0, 0x9b, 0xa5, 0xe8, 0x81, 0xf5, 0xac, 0x01, 0x98, 0x34, 0x12, 0x49, 0x87, 0x53,
	0xae, 0xfb, 0xe6, 0x0e, 0x7d, 0x50, 0x9f, 0xd0, 0x70, 0xca, 0x82, 0x58, 0x75, 0xaa, 0xc6, 0xbc,
	0x9f, 0xa5, 0xa8, 0x59, 0x6c, 0xd3, 0x2a, 0x98, 0xfc, 0x81, 0xa0, 0x07, 0xea, 0xb1, 0x88, 0xc4,
	0x68, 0x26, 0xe3, 0x4e, 0x6d, 0xdd, 0x50, 0x28, 0x98, 0x6c, 0xe7, 0xc7, 0xd7, 0x32, 0xc6, 0xd0,
	0x2c, 0xf1, 0x9c, 0x25, 0x7a, 0x4e, 0xa8, 0x4a, 0x04, 0x57, 0xf4, 0xec, 0xab, 0x03, 0x36, 0x87,
	0x2a, 0x82, 0x14, 0x34, 0xca, 0xdb, 0x3d, 0xf6, 0xfe, 0xf2, 0x58, 0xbd, 0xf5, 0x3f, 0xa2, 0x7b,
	0x2f, 0x5a, 0x2a, 0x97, 0x97, 0x29, 0xbf, 0xda, 0x7b, 0xbd, 0x25, 0xf4, 0x1f, 0xca, 0x0c, 0x9e,
	0x7f, 0x59, 0xb8, 0xce, 0xed, 0xc2, 0x75, 0xbe, 0x2f, 0x5c, 0xe7, 0xe3, 0xd2, 0xad, 0xdc, 0x2e,
	0xdd, 0xca, 0xb7, 0xa5, 0x5b, 0x79, 0x73, 0x52, 0xca, 0x11, 0xfa, 0xe3, 0x58, 0x84, 0x97, 0xe1,
	0xdb, 0x60, 0xca, 0xfd, 0x6b, 0xbf, 0xc8, 0xe9, 0xeb, 0x79, 0x42, 0xd5, 0xb8, 0x66, 0xbe, 0xb6,
	0x67, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x63, 0x41, 0x61, 0x8c, 0xc1, 0x03, 0x00, 0x00,
}

var _ context.Context
var _ grpc.ClientConn

const _ = grpc.SupportPackageIsVersion4


type MsgClient interface {
	AppTokenIssue(ctx context.Context, in *MsgAppTokenIssue, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	RegisterErc20(ctx context.Context, in *MsgRegisterErc20, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AppTokenIssue(ctx context.Context, in *MsgAppTokenIssue, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.contract.v1.Msg/AppTokenIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterErc20(ctx context.Context, in *MsgRegisterErc20, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.contract.v1.Msg/RegisterErc20", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type MsgServer interface {
	AppTokenIssue(context.Context, *MsgAppTokenIssue) (*MsgEmptyResponse, error)
	RegisterErc20(context.Context, *MsgRegisterErc20) (*MsgEmptyResponse, error)
}

type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AppTokenIssue(ctx context.Context, req *MsgAppTokenIssue) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppTokenIssue not implemented")
}
func (*UnimplementedMsgServer) RegisterErc20(ctx context.Context, req *MsgRegisterErc20) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterErc20 not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AppTokenIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAppTokenIssue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AppTokenIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.contract.v1.Msg/AppTokenIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AppTokenIssue(ctx, req.(*MsgAppTokenIssue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterErc20_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterErc20)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterErc20(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.contract.v1.Msg/RegisterErc20",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterErc20(ctx, req.(*MsgRegisterErc20))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "freemasonry.contract.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppTokenIssue",
			Handler:    _Msg_AppTokenIssue_Handler,
		},
		{
			MethodName: "RegisterErc20",
			Handler:    _Msg_RegisterErc20_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tx.proto",
}

func (m *MsgRegisterErc20) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterErc20) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterErc20) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Owner != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Owner))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAppTokenIssue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAppTokenIssue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAppTokenIssue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LogoUrl) > 0 {
		i -= len(m.LogoUrl)
		copy(dAtA[i:], m.LogoUrl)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LogoUrl)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Decimals) > 0 {
		i -= len(m.Decimals)
		copy(dAtA[i:], m.Decimals)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Decimals)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PreMintAmount) > 0 {
		i -= len(m.PreMintAmount)
		copy(dAtA[i:], m.PreMintAmount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PreMintAmount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEmptyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEmptyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEmptyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterErc20) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Owner != 0 {
		n += 1 + sovTx(uint64(m.Owner))
	}
	return n
}

func (m *MsgAppTokenIssue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PreMintAmount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Decimals)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LogoUrl)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgEmptyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterErc20) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterErc20: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterErc20: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			m.Owner = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Owner |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAppTokenIssue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAppTokenIssue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAppTokenIssue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreMintAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreMintAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Decimals = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogoUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogoUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEmptyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEmptyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEmptyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
