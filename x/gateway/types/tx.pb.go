// Code generated by protoc-gen-gogo. DO NOT EDIT.

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/x/staking/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

const _ = proto.GoGoProtoPackageIsVersion3 

type MsgCreateSmartValidator struct {
	Description       types.Description                      `protobuf:"bytes,1,opt,name=description,proto3" json:"description"`
	Commission        types.CommissionRates                  `protobuf:"bytes,2,opt,name=commission,proto3" json:"commission"`
	MinSelfDelegation github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=min_self_delegation,json=minSelfDelegation,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_self_delegation" yaml:"min_self_delegation"`
	DelegatorAddress  string                                 `protobuf:"bytes,4,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty" yaml:"delegator_address"`
	ValidatorAddress  string                                 `protobuf:"bytes,5,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty" yaml:"validator_address"`
	PubKey            string                                 `protobuf:"bytes,6,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Value             types1.Coin                            `protobuf:"bytes,7,opt,name=value,proto3" json:"value"`
}

func (m *MsgCreateSmartValidator) Reset()         { *m = MsgCreateSmartValidator{} }
func (m *MsgCreateSmartValidator) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSmartValidator) ProtoMessage()    {}
func (*MsgCreateSmartValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{0}
}
func (m *MsgCreateSmartValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSmartValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSmartValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSmartValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSmartValidator.Merge(m, src)
}
func (m *MsgCreateSmartValidator) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSmartValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSmartValidator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSmartValidator proto.InternalMessageInfo


type MsgGatewayRegister struct {
	
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	
	GatewayUrl string `protobuf:"bytes,2,opt,name=gateway_url,json=gatewayUrl,proto3" json:"gateway_url,omitempty"`
	
	Delegation string `protobuf:"bytes,3,opt,name=delegation,proto3" json:"delegation,omitempty"`
	
	IndexNumber []string `protobuf:"bytes,4,rep,name=index_number,json=indexNumber,proto3" json:"index_number,omitempty"`
	
	Package string `protobuf:"bytes,5,opt,name=package,proto3" json:"package,omitempty"`
	
	PeerId string `protobuf:"bytes,6,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	
	MachineAddress string `protobuf:"bytes,7,opt,name=machine_address,json=machineAddress,proto3" json:"machine_address,omitempty"`
}

func (m *MsgGatewayRegister) Reset()         { *m = MsgGatewayRegister{} }
func (m *MsgGatewayRegister) String() string { return proto.CompactTextString(m) }
func (*MsgGatewayRegister) ProtoMessage()    {}
func (*MsgGatewayRegister) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{1}
}
func (m *MsgGatewayRegister) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGatewayRegister) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGatewayRegister.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGatewayRegister) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGatewayRegister.Merge(m, src)
}
func (m *MsgGatewayRegister) XXX_Size() int {
	return m.Size()
}
func (m *MsgGatewayRegister) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGatewayRegister.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGatewayRegister proto.InternalMessageInfo

func (m *MsgGatewayRegister) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgGatewayRegister) GetGatewayUrl() string {
	if m != nil {
		return m.GatewayUrl
	}
	return ""
}

func (m *MsgGatewayRegister) GetDelegation() string {
	if m != nil {
		return m.Delegation
	}
	return ""
}

func (m *MsgGatewayRegister) GetIndexNumber() []string {
	if m != nil {
		return m.IndexNumber
	}
	return nil
}

func (m *MsgGatewayRegister) GetPackage() string {
	if m != nil {
		return m.Package
	}
	return ""
}

func (m *MsgGatewayRegister) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func (m *MsgGatewayRegister) GetMachineAddress() string {
	if m != nil {
		return m.MachineAddress
	}
	return ""
}


type MsgGatewayEdit struct {
	
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	
	GatewayUrl string `protobuf:"bytes,2,opt,name=gateway_url,json=gatewayUrl,proto3" json:"gateway_url,omitempty"`
}

func (m *MsgGatewayEdit) Reset()         { *m = MsgGatewayEdit{} }
func (m *MsgGatewayEdit) String() string { return proto.CompactTextString(m) }
func (*MsgGatewayEdit) ProtoMessage()    {}
func (*MsgGatewayEdit) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{2}
}
func (m *MsgGatewayEdit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGatewayEdit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGatewayEdit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGatewayEdit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGatewayEdit.Merge(m, src)
}
func (m *MsgGatewayEdit) XXX_Size() int {
	return m.Size()
}
func (m *MsgGatewayEdit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGatewayEdit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGatewayEdit proto.InternalMessageInfo

func (m *MsgGatewayEdit) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgGatewayEdit) GetGatewayUrl() string {
	if m != nil {
		return m.GatewayUrl
	}
	return ""
}


type MsgGatewayIndexNum struct {
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty" yaml:"delegator_address"`
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty" yaml:"validator_address"`
	
	IndexNumber []string `protobuf:"bytes,3,rep,name=index_number,json=indexNumber,proto3" json:"index_number,omitempty"`
}

func (m *MsgGatewayIndexNum) Reset()         { *m = MsgGatewayIndexNum{} }
func (m *MsgGatewayIndexNum) String() string { return proto.CompactTextString(m) }
func (*MsgGatewayIndexNum) ProtoMessage()    {}
func (*MsgGatewayIndexNum) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{3}
}
func (m *MsgGatewayIndexNum) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGatewayIndexNum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGatewayIndexNum.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGatewayIndexNum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGatewayIndexNum.Merge(m, src)
}
func (m *MsgGatewayIndexNum) XXX_Size() int {
	return m.Size()
}
func (m *MsgGatewayIndexNum) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGatewayIndexNum.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGatewayIndexNum proto.InternalMessageInfo

func (m *MsgGatewayIndexNum) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *MsgGatewayIndexNum) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *MsgGatewayIndexNum) GetIndexNumber() []string {
	if m != nil {
		return m.IndexNumber
	}
	return nil
}


type MsgGatewayUndelegate struct {
	DelegatorAddress string      `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty" yaml:"delegator_address"`
	ValidatorAddress string      `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty" yaml:"validator_address"`
	Amount           types1.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	
	IndexNumber []string `protobuf:"bytes,4,rep,name=index_number,json=indexNumber,proto3" json:"index_number,omitempty"`
}

func (m *MsgGatewayUndelegate) Reset()         { *m = MsgGatewayUndelegate{} }
func (m *MsgGatewayUndelegate) String() string { return proto.CompactTextString(m) }
func (*MsgGatewayUndelegate) ProtoMessage()    {}
func (*MsgGatewayUndelegate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{4}
}
func (m *MsgGatewayUndelegate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGatewayUndelegate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGatewayUndelegate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGatewayUndelegate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGatewayUndelegate.Merge(m, src)
}
func (m *MsgGatewayUndelegate) XXX_Size() int {
	return m.Size()
}
func (m *MsgGatewayUndelegate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGatewayUndelegate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGatewayUndelegate proto.InternalMessageInfo

func (m *MsgGatewayUndelegate) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *MsgGatewayUndelegate) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *MsgGatewayUndelegate) GetAmount() types1.Coin {
	if m != nil {
		return m.Amount
	}
	return types1.Coin{}
}

func (m *MsgGatewayUndelegate) GetIndexNumber() []string {
	if m != nil {
		return m.IndexNumber
	}
	return nil
}


type MsgGatewayBeginRedelegate struct {
	DelegatorAddress    string      `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty" yaml:"delegator_address"`
	ValidatorSrcAddress string      `protobuf:"bytes,2,opt,name=validator_src_address,json=validatorSrcAddress,proto3" json:"validator_src_address,omitempty" yaml:"validator_src_address"`
	ValidatorDstAddress string      `protobuf:"bytes,3,opt,name=validator_dst_address,json=validatorDstAddress,proto3" json:"validator_dst_address,omitempty" yaml:"validator_dst_address"`
	Amount              types1.Coin `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount"`
	
	IndexNumber []string `protobuf:"bytes,5,rep,name=index_number,json=indexNumber,proto3" json:"index_number,omitempty"`
}

func (m *MsgGatewayBeginRedelegate) Reset()         { *m = MsgGatewayBeginRedelegate{} }
func (m *MsgGatewayBeginRedelegate) String() string { return proto.CompactTextString(m) }
func (*MsgGatewayBeginRedelegate) ProtoMessage()    {}
func (*MsgGatewayBeginRedelegate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{5}
}
func (m *MsgGatewayBeginRedelegate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGatewayBeginRedelegate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGatewayBeginRedelegate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGatewayBeginRedelegate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGatewayBeginRedelegate.Merge(m, src)
}
func (m *MsgGatewayBeginRedelegate) XXX_Size() int {
	return m.Size()
}
func (m *MsgGatewayBeginRedelegate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGatewayBeginRedelegate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGatewayBeginRedelegate proto.InternalMessageInfo

type MsgGatewayUpload struct {
	FromAddress    string `protobuf:"bytes,1,opt,name=fromAddress,proto3" json:"fromAddress,omitempty" yaml:"from_address"`
	GatewayKeyInfo []byte `protobuf:"bytes,2,opt,name=GatewayKeyInfo,proto3" json:"GatewayKeyInfo,omitempty" yaml:"gateway_key_info"`
}

func (m *MsgGatewayUpload) Reset()         { *m = MsgGatewayUpload{} }
func (m *MsgGatewayUpload) String() string { return proto.CompactTextString(m) }
func (*MsgGatewayUpload) ProtoMessage()    {}
func (*MsgGatewayUpload) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{6}
}
func (m *MsgGatewayUpload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGatewayUpload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGatewayUpload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGatewayUpload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGatewayUpload.Merge(m, src)
}
func (m *MsgGatewayUpload) XXX_Size() int {
	return m.Size()
}
func (m *MsgGatewayUpload) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGatewayUpload.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGatewayUpload proto.InternalMessageInfo

func (m *MsgGatewayUpload) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgGatewayUpload) GetGatewayKeyInfo() []byte {
	if m != nil {
		return m.GatewayKeyInfo
	}
	return nil
}

type MsgBeginRedelegateResponse struct {
	CompletionTime time.Time `protobuf:"bytes,1,opt,name=completion_time,json=completionTime,proto3,stdtime" json:"completion_time"`
}

func (m *MsgBeginRedelegateResponse) Reset()         { *m = MsgBeginRedelegateResponse{} }
func (m *MsgBeginRedelegateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBeginRedelegateResponse) ProtoMessage()    {}
func (*MsgBeginRedelegateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{7}
}
func (m *MsgBeginRedelegateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBeginRedelegateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBeginRedelegateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBeginRedelegateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBeginRedelegateResponse.Merge(m, src)
}
func (m *MsgBeginRedelegateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBeginRedelegateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBeginRedelegateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBeginRedelegateResponse proto.InternalMessageInfo

func (m *MsgBeginRedelegateResponse) GetCompletionTime() time.Time {
	if m != nil {
		return m.CompletionTime
	}
	return time.Time{}
}

type MsgEmptyResponse struct {
}

func (m *MsgEmptyResponse) Reset()         { *m = MsgEmptyResponse{} }
func (m *MsgEmptyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEmptyResponse) ProtoMessage()    {}
func (*MsgEmptyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{8}
}
func (m *MsgEmptyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEmptyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEmptyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEmptyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEmptyResponse.Merge(m, src)
}
func (m *MsgEmptyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEmptyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEmptyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEmptyResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateSmartValidator)(nil), "freemasonry.gateway.v1.MsgCreateSmartValidator")
	proto.RegisterType((*MsgGatewayRegister)(nil), "freemasonry.gateway.v1.MsgGatewayRegister")
	proto.RegisterType((*MsgGatewayEdit)(nil), "freemasonry.gateway.v1.MsgGatewayEdit")
	proto.RegisterType((*MsgGatewayIndexNum)(nil), "freemasonry.gateway.v1.MsgGatewayIndexNum")
	proto.RegisterType((*MsgGatewayUndelegate)(nil), "freemasonry.gateway.v1.MsgGatewayUndelegate")
	proto.RegisterType((*MsgGatewayBeginRedelegate)(nil), "freemasonry.gateway.v1.MsgGatewayBeginRedelegate")
	proto.RegisterType((*MsgGatewayUpload)(nil), "freemasonry.gateway.v1.MsgGatewayUpload")
	proto.RegisterType((*MsgBeginRedelegateResponse)(nil), "freemasonry.gateway.v1.MsgBeginRedelegateResponse")
	proto.RegisterType((*MsgEmptyResponse)(nil), "freemasonry.gateway.v1.MsgEmptyResponse")
}

func init() { proto.RegisterFile("tx.proto", fileDescriptor_0fd2153dc07d3b5c) }

var fileDescriptor_0fd2153dc07d3b5c = []byte{
	
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0x8e, 0xfb, 0x73, 0x3b, 0x59, 0xfa, 0xc3, 0x2d, 0xdb, 0x34, 0x54, 0x71, 0x31, 0x68, 0x37,
	0x20, 0xb0, 0xd5, 0x22, 0x84, 0xd8, 0xdb, 0xa6, 0x5d, 0xa1, 0xa8, 0x84, 0x83, 0xbb, 0xcb, 0x81,
	0x8b, 0x35, 0xb1, 0x5f, 0xdc, 0x51, 0x6c, 0x8f, 0xf1, 0x4c, 0x4a, 0x23, 0x21, 0x71, 0xdd, 0xe3,
	0x8a, 0xbf, 0x60, 0x25, 0xfe, 0x99, 0xbd, 0x20, 0xed, 0x11, 0x71, 0x08, 0xa8, 0xbd, 0x70, 0xe2,
	0x90, 0x13, 0x27, 0x84, 0x6c, 0x8f, 0x1d, 0xd7, 0x49, 0xda, 0x74, 0x17, 0x24, 0x4e, 0xc9, 0xbc,
	0xf9, 0xde, 0xf7, 0xcd, 0xfb, 0xfc, 0xe6, 0x07, 0xba, 0xc3, 0xcf, 0xb5, 0x20, 0xa4, 0x9c, 0xca,
	0xf7, 0x3a, 0x21, 0x80, 0x87, 0x19, 0xf5, 0xc3, 0xbe, 0xe6, 0x60, 0x0e, 0xdf, 0xe1, 0xbe, 0x76,
	0xb6, 0x5f, 0xdd, 0x75, 0x28, 0x75, 0x5c, 0xd0, 0x71, 0x40, 0x74, 0xec, 0xfb, 0x94, 0x63, 0x4e,
	0xa8, 0xcf, 0x92, 0xac, 0xea, 0x96, 0x43, 0x1d, 0x1a, 0xff, 0xd5, 0xa3, 0x7f, 0x22, 0xaa, 0x88,
	0x9c, 0x78, 0xd4, 0xee, 0x75, 0x74, 0x4e, 0x3c, 0x60, 0x1c, 0x7b, 0x81, 0x00, 0xec, 0x58, 0x94,
	0x79, 0x94, 0x99, 0x49, 0x66, 0x32, 0x10, 0x53, 0xb5, 0x64, 0xa4, 0xb7, 0x31, 0x03, 0xfd, 0x6c,
	0xbf, 0x0d, 0x1c, 0xef, 0xeb, 0x16, 0x25, 0xbe, 0x98, 0x7f, 0x5f, 0xcc, 0x33, 0x8e, 0xbb, 0xc4,
	0x77, 0x32, 0x88, 0x18, 0x27, 0x28, 0xf5, 0xa7, 0x05, 0xb4, 0xdd, 0x62, 0xce, 0x61, 0x08, 0x98,
	0xc3, 0x89, 0x87, 0x43, 0xfe, 0x35, 0x76, 0x89, 0x8d, 0x39, 0x0d, 0xe5, 0x63, 0x54, 0xb6, 0x81,
	0x59, 0x21, 0x09, 0xa2, 0x4a, 0x2a, 0xd2, 0x9e, 0x54, 0x2f, 0x1f, 0xbc, 0xa7, 0x89, 0x55, 0xa4,
	0x3c, 0x82, 0x57, 0x3b, 0x1a, 0x41, 0x1b, 0x0b, 0x2f, 0x07, 0x4a, 0xc9, 0xc8, 0x67, 0xcb, 0x2d,
	0x84, 0x2c, 0xea, 0x79, 0x84, 0xb1, 0x88, 0x6b, 0x2e, 0xe6, 0x7a, 0x30, 0x8d, 0xeb, 0x30, 0x43,
	0x1a, 0x98, 0x03, 0x13, 0x7c, 0x39, 0x02, 0xf9, 0x7b, 0xb4, 0xe9, 0x11, 0xdf, 0x64, 0xe0, 0x76,
	0x4c, 0x1b, 0x5c, 0x70, 0x62, 0xb7, 0x2b, 0xf3, 0x7b, 0x52, 0x7d, 0xa5, 0xf1, 0x65, 0x04, 0xff,
	0x75, 0xa0, 0xdc, 0x77, 0x08, 0x3f, 0xed, 0xb5, 0x35, 0x8b, 0x7a, 0xc2, 0x3b, 0xf1, 0xf3, 0x31,
	0xb3, 0xbb, 0x3a, 0xef, 0x07, 0xc0, 0xb4, 0xa6, 0xcf, 0x87, 0x03, 0xa5, 0xda, 0xc7, 0x9e, 0xfb,
	0x50, 0x9d, 0x40, 0xa9, 0x1a, 0x1b, 0x1e, 0xf1, 0x4f, 0xc0, 0xed, 0x1c, 0x65, 0x31, 0xb9, 0x89,
	0x36, 0x04, 0x82, 0x86, 0x26, 0xb6, 0xed, 0x10, 0x18, 0xab, 0x2c, 0xc4, 0xda, 0xbb, 0xc3, 0x81,
	0x52, 0x49, 0xd8, 0xc6, 0x20, 0xaa, 0xb1, 0x9e, 0xc5, 0x1e, 0x25, 0xa1, 0x88, 0xea, 0x2c, 0x75,
	0x3c, 0xa3, 0x5a, 0x2c, 0x52, 0x8d, 0x41, 0x54, 0x63, 0x3d, 0x8b, 0xa5, 0x54, 0xdb, 0x68, 0x39,
	0xe8, 0xb5, 0xcd, 0x2e, 0xf4, 0x2b, 0x4b, 0x11, 0x81, 0xb1, 0x14, 0xf4, 0xda, 0xc7, 0xd0, 0x97,
	0x3f, 0x45, 0x8b, 0x67, 0xd8, 0xed, 0x41, 0x65, 0x39, 0xb6, 0x7d, 0x27, 0xb5, 0x3d, 0x6a, 0x9d,
	0x9c, 0xe7, 0x24, 0xfd, 0x70, 0x09, 0xfa, 0xe1, 0x9d, 0x67, 0x2f, 0x94, 0xd2, 0x1f, 0x2f, 0x94,
	0x92, 0xfa, 0xa7, 0x84, 0xe4, 0x16, 0x73, 0xbe, 0x48, 0xba, 0xdd, 0x00, 0x87, 0x30, 0x0e, 0xa1,
	0x5c, 0x41, 0xcb, 0xe9, 0x8a, 0xa5, 0x58, 0x30, 0x1d, 0xca, 0x0a, 0x2a, 0x8b, 0xad, 0x61, 0xf6,
	0x42, 0x37, 0xfe, 0xdc, 0x2b, 0x06, 0x12, 0xa1, 0xa7, 0xa1, 0x2b, 0xd7, 0x10, 0x2a, 0x7e, 0x36,
	0x23, 0x17, 0x91, 0xdf, 0x45, 0x77, 0x89, 0x6f, 0xc3, 0xb9, 0xe9, 0xf7, 0xbc, 0x36, 0x84, 0x95,
	0x85, 0xbd, 0xf9, 0xfa, 0x8a, 0x51, 0x8e, 0x63, 0x5f, 0xc5, 0xa1, 0x48, 0x3d, 0xc0, 0x56, 0x17,
	0x3b, 0x90, 0xf8, 0x65, 0xa4, 0xc3, 0xd8, 0x08, 0x80, 0xd0, 0x24, 0x76, 0x66, 0x04, 0x40, 0xd8,
	0xb4, 0xe5, 0x07, 0x68, 0xcd, 0xc3, 0xd6, 0x29, 0xf1, 0x21, 0xb3, 0x7a, 0x39, 0x06, 0xac, 0x8a,
	0xb0, 0xb0, 0x52, 0x3d, 0x46, 0xab, 0xa3, 0x7a, 0x1f, 0xdb, 0x84, 0xbf, 0x41, 0xad, 0xea, 0xcf,
	0x57, 0xdc, 0x6b, 0x8a, 0x12, 0x26, 0x37, 0x91, 0xf4, 0xef, 0x35, 0xd1, 0xdc, 0x6b, 0x35, 0x51,
	0xd1, 0xf8, 0xf9, 0x31, 0xe3, 0xd5, 0x67, 0x73, 0x68, 0x6b, 0x54, 0xcf, 0x53, 0x5f, 0x2c, 0x07,
	0xfe, 0xa7, 0x15, 0x7d, 0x86, 0x96, 0xb0, 0x47, 0x7b, 0x3e, 0x8f, 0xdb, 0x6c, 0x86, 0xf6, 0x17,
	0xf0, 0x19, 0x7a, 0x50, 0xfd, 0x6b, 0x0e, 0xed, 0x8c, 0xac, 0x68, 0x80, 0x43, 0x7c, 0x03, 0xfe,
	0x0b, 0x3f, 0x9e, 0xa0, 0xb7, 0x47, 0xc5, 0xb2, 0xd0, 0x2a, 0x78, 0xb2, 0x37, 0x1c, 0x28, 0xbb,
	0x45, 0x4f, 0x72, 0x30, 0xd5, 0xd8, 0xcc, 0xe2, 0x27, 0xa1, 0x35, 0x91, 0xd5, 0x66, 0x3c, 0x63,
	0x9d, 0x9f, 0xce, 0x9a, 0x83, 0xe5, 0x59, 0x8f, 0x18, 0x1f, 0x37, 0x7c, 0xe1, 0xcd, 0x0c, 0x5f,
	0x1c, 0x33, 0x3c, 0x77, 0x26, 0xfd, 0x28, 0xa1, 0xf5, 0x5c, 0x17, 0x06, 0x2e, 0xc5, 0xb6, 0xfc,
	0x39, 0x2a, 0x77, 0x42, 0xea, 0x3d, 0xba, 0xe2, 0xf5, 0xf6, 0x70, 0xa0, 0x6c, 0x26, 0x65, 0x44,
	0x93, 0xa3, 0xd5, 0xe7, 0xb1, 0xf2, 0x21, 0x5a, 0x15, 0x5c, 0xc7, 0xd0, 0x6f, 0xfa, 0x1d, 0x1a,
	0x5b, 0x7b, 0xb7, 0xf1, 0xce, 0x70, 0xa0, 0x6c, 0x27, 0xd9, 0xe9, 0x36, 0xef, 0x42, 0xdf, 0x24,
	0x7e, 0x87, 0xaa, 0x46, 0x21, 0x45, 0xed, 0xa2, 0x6a, 0x8b, 0x39, 0x85, 0x3e, 0x30, 0x80, 0x05,
	0xd4, 0x67, 0x20, 0xb7, 0xd0, 0x9a, 0x45, 0xbd, 0xc0, 0x85, 0xe8, 0x88, 0x33, 0xa3, 0xbb, 0x5e,
	0x5c, 0xaa, 0x55, 0x2d, 0x79, 0x08, 0x68, 0xe9, 0x43, 0x40, 0x7b, 0x92, 0x3e, 0x04, 0x1a, 0x77,
	0x22, 0x8b, 0x9e, 0xff, 0xa6, 0x48, 0xc6, 0xea, 0x28, 0x39, 0x9a, 0x56, 0xe5, 0xd8, 0x80, 0xc7,
	0x5e, 0xc0, 0xfb, 0xa9, 0xc4, 0xc1, 0xdf, 0x8b, 0x68, 0xbe, 0xc5, 0x1c, 0xf9, 0x5b, 0xb4, 0x35,
	0xf1, 0x4e, 0xd7, 0xb5, 0xc9, 0xcf, 0x17, 0x6d, 0xca, 0x23, 0xa0, 0x5a, 0xbf, 0x26, 0xe1, 0x8a,
	0xb4, 0xec, 0xa0, 0xb5, 0xe2, 0x05, 0xf1, 0xe1, 0x35, 0xc9, 0x05, 0xec, 0x6b, 0x09, 0x65, 0x67,
	0xe9, 0x0c, 0x42, 0x29, 0xf6, 0x16, 0x42, 0x5d, 0xb4, 0x31, 0x7e, 0xc8, 0x7d, 0x74, 0xb3, 0xd4,
	0x08, 0x7d, 0x0b, 0xb1, 0x1f, 0xd0, 0xbd, 0x29, 0xc7, 0xc8, 0xfe, 0xcd, 0x8a, 0x85, 0x94, 0xea,
	0xc1, 0x35, 0x29, 0xd3, 0xba, 0xd3, 0x42, 0x6f, 0x5d, 0xdd, 0x4c, 0xf5, 0x19, 0x2a, 0x8d, 0x91,
	0xb7, 0xa8, 0xd2, 0x44, 0xe5, 0xfc, 0xad, 0x7a, 0xff, 0x66, 0x89, 0x08, 0x37, 0xbb, 0x40, 0xe3,
	0xf0, 0xe5, 0x45, 0x4d, 0x7a, 0x75, 0x51, 0x93, 0x7e, 0xbf, 0xa8, 0x49, 0xcf, 0x2f, 0x6b, 0xa5,
	0x57, 0x97, 0xb5, 0xd2, 0x2f, 0x97, 0xb5, 0xd2, 0x37, 0x1f, 0xe4, 0x29, 0x2c, 0x4b, 0x6f, 0xbb,
	0xd4, 0xea, 0x5a, 0xa7, 0x98, 0xf8, 0xfa, 0xb9, 0x2e, 0x28, 0x93, 0x47, 0x61, 0x7b, 0x29, 0xde,
	0x87, 0x9f, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x72, 0xdb, 0x8e, 0xf6, 0x0b, 0x00, 0x00,
}

var _ context.Context
var _ grpc.ClientConn

const _ = grpc.SupportPackageIsVersion4


type MsgClient interface {
	
	CreateSmartValidator(ctx context.Context, in *MsgCreateSmartValidator, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	
	GatewayRegister(ctx context.Context, in *MsgGatewayRegister, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	
	GatewayIndexNum(ctx context.Context, in *MsgGatewayIndexNum, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	
	GatewayUndelegate(ctx context.Context, in *MsgGatewayUndelegate, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	
	GatewayBeginRedelegate(ctx context.Context, in *MsgGatewayBeginRedelegate, opts ...grpc.CallOption) (*MsgBeginRedelegateResponse, error)
	
	GatewayUpload(ctx context.Context, in *MsgGatewayUpload, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	
	GatewayEdit(ctx context.Context, in *MsgGatewayEdit, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateSmartValidator(ctx context.Context, in *MsgCreateSmartValidator, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.gateway.v1.Msg/CreateSmartValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GatewayRegister(ctx context.Context, in *MsgGatewayRegister, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.gateway.v1.Msg/GatewayRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GatewayIndexNum(ctx context.Context, in *MsgGatewayIndexNum, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.gateway.v1.Msg/GatewayIndexNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GatewayUndelegate(ctx context.Context, in *MsgGatewayUndelegate, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.gateway.v1.Msg/GatewayUndelegate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GatewayBeginRedelegate(ctx context.Context, in *MsgGatewayBeginRedelegate, opts ...grpc.CallOption) (*MsgBeginRedelegateResponse, error) {
	out := new(MsgBeginRedelegateResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.gateway.v1.Msg/GatewayBeginRedelegate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GatewayUpload(ctx context.Context, in *MsgGatewayUpload, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.gateway.v1.Msg/GatewayUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GatewayEdit(ctx context.Context, in *MsgGatewayEdit, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.gateway.v1.Msg/GatewayEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type MsgServer interface {
	
	CreateSmartValidator(context.Context, *MsgCreateSmartValidator) (*MsgEmptyResponse, error)
	
	GatewayRegister(context.Context, *MsgGatewayRegister) (*MsgEmptyResponse, error)
	
	GatewayIndexNum(context.Context, *MsgGatewayIndexNum) (*MsgEmptyResponse, error)
	
	GatewayUndelegate(context.Context, *MsgGatewayUndelegate) (*MsgEmptyResponse, error)
	
	GatewayBeginRedelegate(context.Context, *MsgGatewayBeginRedelegate) (*MsgBeginRedelegateResponse, error)
	
	GatewayUpload(context.Context, *MsgGatewayUpload) (*MsgEmptyResponse, error)
	
	GatewayEdit(context.Context, *MsgGatewayEdit) (*MsgEmptyResponse, error)
}

type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateSmartValidator(ctx context.Context, req *MsgCreateSmartValidator) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSmartValidator not implemented")
}
func (*UnimplementedMsgServer) GatewayRegister(ctx context.Context, req *MsgGatewayRegister) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayRegister not implemented")
}
func (*UnimplementedMsgServer) GatewayIndexNum(ctx context.Context, req *MsgGatewayIndexNum) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayIndexNum not implemented")
}
func (*UnimplementedMsgServer) GatewayUndelegate(ctx context.Context, req *MsgGatewayUndelegate) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayUndelegate not implemented")
}
func (*UnimplementedMsgServer) GatewayBeginRedelegate(ctx context.Context, req *MsgGatewayBeginRedelegate) (*MsgBeginRedelegateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayBeginRedelegate not implemented")
}
func (*UnimplementedMsgServer) GatewayUpload(ctx context.Context, req *MsgGatewayUpload) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayUpload not implemented")
}
func (*UnimplementedMsgServer) GatewayEdit(ctx context.Context, req *MsgGatewayEdit) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayEdit not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateSmartValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateSmartValidator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateSmartValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.gateway.v1.Msg/CreateSmartValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateSmartValidator(ctx, req.(*MsgCreateSmartValidator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GatewayRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGatewayRegister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GatewayRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.gateway.v1.Msg/GatewayRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GatewayRegister(ctx, req.(*MsgGatewayRegister))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GatewayIndexNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGatewayIndexNum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GatewayIndexNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.gateway.v1.Msg/GatewayIndexNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GatewayIndexNum(ctx, req.(*MsgGatewayIndexNum))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GatewayUndelegate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGatewayUndelegate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GatewayUndelegate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.gateway.v1.Msg/GatewayUndelegate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GatewayUndelegate(ctx, req.(*MsgGatewayUndelegate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GatewayBeginRedelegate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGatewayBeginRedelegate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GatewayBeginRedelegate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.gateway.v1.Msg/GatewayBeginRedelegate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GatewayBeginRedelegate(ctx, req.(*MsgGatewayBeginRedelegate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GatewayUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGatewayUpload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GatewayUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.gateway.v1.Msg/GatewayUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GatewayUpload(ctx, req.(*MsgGatewayUpload))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GatewayEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGatewayEdit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GatewayEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.gateway.v1.Msg/GatewayEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GatewayEdit(ctx, req.(*MsgGatewayEdit))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "freemasonry.gateway.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSmartValidator",
			Handler:    _Msg_CreateSmartValidator_Handler,
		},
		{
			MethodName: "GatewayRegister",
			Handler:    _Msg_GatewayRegister_Handler,
		},
		{
			MethodName: "GatewayIndexNum",
			Handler:    _Msg_GatewayIndexNum_Handler,
		},
		{
			MethodName: "GatewayUndelegate",
			Handler:    _Msg_GatewayUndelegate_Handler,
		},
		{
			MethodName: "GatewayBeginRedelegate",
			Handler:    _Msg_GatewayBeginRedelegate_Handler,
		},
		{
			MethodName: "GatewayUpload",
			Handler:    _Msg_GatewayUpload_Handler,
		},
		{
			MethodName: "GatewayEdit",
			Handler:    _Msg_GatewayEdit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tx.proto",
}

func (m *MsgCreateSmartValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSmartValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSmartValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.MinSelfDelegation.Size()
		i -= size
		if _, err := m.MinSelfDelegation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Commission.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgGatewayRegister) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGatewayRegister) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGatewayRegister) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MachineAddress) > 0 {
		i -= len(m.MachineAddress)
		copy(dAtA[i:], m.MachineAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MachineAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PeerId) > 0 {
		i -= len(m.PeerId)
		copy(dAtA[i:], m.PeerId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PeerId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Package) > 0 {
		i -= len(m.Package)
		copy(dAtA[i:], m.Package)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Package)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.IndexNumber) > 0 {
		for iNdEx := len(m.IndexNumber) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IndexNumber[iNdEx])
			copy(dAtA[i:], m.IndexNumber[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.IndexNumber[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Delegation) > 0 {
		i -= len(m.Delegation)
		copy(dAtA[i:], m.Delegation)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Delegation)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GatewayUrl) > 0 {
		i -= len(m.GatewayUrl)
		copy(dAtA[i:], m.GatewayUrl)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GatewayUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGatewayEdit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGatewayEdit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGatewayEdit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GatewayUrl) > 0 {
		i -= len(m.GatewayUrl)
		copy(dAtA[i:], m.GatewayUrl)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GatewayUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGatewayIndexNum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGatewayIndexNum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGatewayIndexNum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IndexNumber) > 0 {
		for iNdEx := len(m.IndexNumber) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IndexNumber[iNdEx])
			copy(dAtA[i:], m.IndexNumber[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.IndexNumber[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGatewayUndelegate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGatewayUndelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGatewayUndelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IndexNumber) > 0 {
		for iNdEx := len(m.IndexNumber) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IndexNumber[iNdEx])
			copy(dAtA[i:], m.IndexNumber[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.IndexNumber[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGatewayBeginRedelegate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGatewayBeginRedelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGatewayBeginRedelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IndexNumber) > 0 {
		for iNdEx := len(m.IndexNumber) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IndexNumber[iNdEx])
			copy(dAtA[i:], m.IndexNumber[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.IndexNumber[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ValidatorDstAddress) > 0 {
		i -= len(m.ValidatorDstAddress)
		copy(dAtA[i:], m.ValidatorDstAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorDstAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorSrcAddress) > 0 {
		i -= len(m.ValidatorSrcAddress)
		copy(dAtA[i:], m.ValidatorSrcAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorSrcAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGatewayUpload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGatewayUpload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGatewayUpload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GatewayKeyInfo) > 0 {
		i -= len(m.GatewayKeyInfo)
		copy(dAtA[i:], m.GatewayKeyInfo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GatewayKeyInfo)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBeginRedelegateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBeginRedelegateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBeginRedelegateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CompletionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintTx(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgEmptyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEmptyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEmptyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateSmartValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Description.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Commission.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.MinSelfDelegation.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgGatewayRegister) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GatewayUrl)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Delegation)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.IndexNumber) > 0 {
		for _, s := range m.IndexNumber {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Package)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PeerId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MachineAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgGatewayEdit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GatewayUrl)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgGatewayIndexNum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.IndexNumber) > 0 {
		for _, s := range m.IndexNumber {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgGatewayUndelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.IndexNumber) > 0 {
		for _, s := range m.IndexNumber {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgGatewayBeginRedelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidatorSrcAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidatorDstAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.IndexNumber) > 0 {
		for _, s := range m.IndexNumber {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgGatewayUpload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GatewayKeyInfo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBeginRedelegateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime)
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgEmptyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateSmartValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSmartValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSmartValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSelfDelegation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinSelfDelegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGatewayRegister) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGatewayRegister: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGatewayRegister: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexNumber = append(m.IndexNumber, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Package", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Package = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGatewayEdit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGatewayEdit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGatewayEdit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGatewayIndexNum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGatewayIndexNum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGatewayIndexNum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexNumber = append(m.IndexNumber, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGatewayUndelegate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGatewayUndelegate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGatewayUndelegate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexNumber = append(m.IndexNumber, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGatewayBeginRedelegate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGatewayBeginRedelegate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGatewayBeginRedelegate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSrcAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorSrcAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorDstAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorDstAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexNumber = append(m.IndexNumber, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGatewayUpload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGatewayUpload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGatewayUpload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayKeyInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayKeyInfo = append(m.GatewayKeyInfo[:0], dAtA[iNdEx:postIndex]...)
			if m.GatewayKeyInfo == nil {
				m.GatewayKeyInfo = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBeginRedelegateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBeginRedelegateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBeginRedelegateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEmptyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEmptyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEmptyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
