// Code generated by protoc-gen-gogo. DO NOT EDIT.

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

const _ = proto.GoGoProtoPackageIsVersion3 

type GenesisState struct {
	
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	
	Gateways []GatewayExport `protobuf:"bytes,2,rep,name=gateways,proto3" json:"gateways"`
	
	GatewayNumIndexs map[string]GatewayNumIndexExport `protobuf:"bytes,3,rep,name=gateway_num_indexs,json=gatewayNumIndexs,proto3" json:"gateway_num_indexs" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_14205810582f3203, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetGateways() []GatewayExport {
	if m != nil {
		return m.Gateways
	}
	return nil
}

func (m *GenesisState) GetGatewayNumIndexs() map[string]GatewayNumIndexExport {
	if m != nil {
		return m.GatewayNumIndexs
	}
	return nil
}

type GatewayNumIndexExport struct {
	
	GatewayAddress string `protobuf:"bytes,1,opt,name=gateway_address,json=gatewayAddress,proto3" json:"gateway_address,omitempty"`
	
	NumberIndex string `protobuf:"bytes,2,opt,name=number_index,json=numberIndex,proto3" json:"number_index,omitempty"`
	
	NumberEnd []string `protobuf:"bytes,3,rep,name=number_end,json=numberEnd,proto3" json:"number_end,omitempty"`
	
	Status int64 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	
	Validity int64 `protobuf:"varint,5,opt,name=validity,proto3" json:"validity,omitempty"`
	
	IsFirst bool `protobuf:"varint,6,opt,name=is_first,json=isFirst,proto3" json:"is_first,omitempty"`
}

func (m *GatewayNumIndexExport) Reset()         { *m = GatewayNumIndexExport{} }
func (m *GatewayNumIndexExport) String() string { return proto.CompactTextString(m) }
func (*GatewayNumIndexExport) ProtoMessage()    {}
func (*GatewayNumIndexExport) Descriptor() ([]byte, []int) {
	return fileDescriptor_14205810582f3203, []int{1}
}
func (m *GatewayNumIndexExport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayNumIndexExport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayNumIndexExport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayNumIndexExport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayNumIndexExport.Merge(m, src)
}
func (m *GatewayNumIndexExport) XXX_Size() int {
	return m.Size()
}
func (m *GatewayNumIndexExport) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayNumIndexExport.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayNumIndexExport proto.InternalMessageInfo

func (m *GatewayNumIndexExport) GetGatewayAddress() string {
	if m != nil {
		return m.GatewayAddress
	}
	return ""
}

func (m *GatewayNumIndexExport) GetNumberIndex() string {
	if m != nil {
		return m.NumberIndex
	}
	return ""
}

func (m *GatewayNumIndexExport) GetNumberEnd() []string {
	if m != nil {
		return m.NumberEnd
	}
	return nil
}

func (m *GatewayNumIndexExport) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GatewayNumIndexExport) GetValidity() int64 {
	if m != nil {
		return m.Validity
	}
	return 0
}

func (m *GatewayNumIndexExport) GetIsFirst() bool {
	if m != nil {
		return m.IsFirst
	}
	return false
}

type GatewayExport struct {
	
	GatewayAddress string `protobuf:"bytes,1,opt,name=gateway_address,json=gatewayAddress,proto3" json:"gateway_address,omitempty"`
	
	GatewayName string `protobuf:"bytes,2,opt,name=gateway_name,json=gatewayName,proto3" json:"gateway_name,omitempty"`
	
	GatewayUrl string `protobuf:"bytes,3,opt,name=gateway_url,json=gatewayUrl,proto3" json:"gateway_url,omitempty"`
	
	GatewayQuota int64 `protobuf:"varint,4,opt,name=gateway_quota,json=gatewayQuota,proto3" json:"gateway_quota,omitempty"`
	
	Status int64 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	
	GatewayNum []GatewayNumIndexExport `protobuf:"bytes,6,rep,name=gateway_num,json=gatewayNum,proto3" json:"gateway_num"`
	
	Package string `protobuf:"bytes,7,opt,name=package,proto3" json:"package,omitempty"`
	
	PeerId string `protobuf:"bytes,8,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	
	MachineAddress string `protobuf:"bytes,9,opt,name=machine_address,json=machineAddress,proto3" json:"machine_address,omitempty"`
	
	MachineUpdateTime int64 `protobuf:"varint,10,opt,name=machine_update_time,json=machineUpdateTime,proto3" json:"machine_update_time,omitempty"`
	
	ValAccAddress string `protobuf:"bytes,11,opt,name=val_acc_address,json=valAccAddress,proto3" json:"val_acc_address,omitempty"`
}

func (m *GatewayExport) Reset()         { *m = GatewayExport{} }
func (m *GatewayExport) String() string { return proto.CompactTextString(m) }
func (*GatewayExport) ProtoMessage()    {}
func (*GatewayExport) Descriptor() ([]byte, []int) {
	return fileDescriptor_14205810582f3203, []int{2}
}
func (m *GatewayExport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayExport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayExport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayExport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayExport.Merge(m, src)
}
func (m *GatewayExport) XXX_Size() int {
	return m.Size()
}
func (m *GatewayExport) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayExport.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayExport proto.InternalMessageInfo

func (m *GatewayExport) GetGatewayAddress() string {
	if m != nil {
		return m.GatewayAddress
	}
	return ""
}

func (m *GatewayExport) GetGatewayName() string {
	if m != nil {
		return m.GatewayName
	}
	return ""
}

func (m *GatewayExport) GetGatewayUrl() string {
	if m != nil {
		return m.GatewayUrl
	}
	return ""
}

func (m *GatewayExport) GetGatewayQuota() int64 {
	if m != nil {
		return m.GatewayQuota
	}
	return 0
}

func (m *GatewayExport) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GatewayExport) GetGatewayNum() []GatewayNumIndexExport {
	if m != nil {
		return m.GatewayNum
	}
	return nil
}

func (m *GatewayExport) GetPackage() string {
	if m != nil {
		return m.Package
	}
	return ""
}

func (m *GatewayExport) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func (m *GatewayExport) GetMachineAddress() string {
	if m != nil {
		return m.MachineAddress
	}
	return ""
}

func (m *GatewayExport) GetMachineUpdateTime() int64 {
	if m != nil {
		return m.MachineUpdateTime
	}
	return 0
}

func (m *GatewayExport) GetValAccAddress() string {
	if m != nil {
		return m.ValAccAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "freemasonry.gateway.v1.GenesisState")
	proto.RegisterMapType((map[string]GatewayNumIndexExport)(nil), "freemasonry.gateway.v1.GenesisState.GatewayNumIndexsEntry")
	proto.RegisterType((*GatewayNumIndexExport)(nil), "freemasonry.gateway.v1.GatewayNumIndexExport")
	proto.RegisterType((*GatewayExport)(nil), "freemasonry.gateway.v1.GatewayExport")
}

func init() { proto.RegisterFile("genesis.proto", fileDescriptor_14205810582f3203) }

var fileDescriptor_14205810582f3203 = []byte{
	
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4d, 0x4f, 0x14, 0x31,
	0x18, 0xde, 0xd9, 0x85, 0xfd, 0x78, 0x97, 0x15, 0xac, 0x8a, 0x75, 0xa3, 0xc3, 0x8a, 0x51, 0xd7,
	0x83, 0x3b, 0x01, 0x2f, 0x86, 0x78, 0x01, 0x82, 0x84, 0x8b, 0xd1, 0x11, 0x2e, 0x5e, 0x36, 0x65,
	0xa6, 0x0c, 0x0d, 0x33, 0x9d, 0xb1, 0xed, 0xac, 0xec, 0xbf, 0xf0, 0x3f, 0x79, 0xe1, 0x88, 0x37,
	0x4f, 0xc6, 0xc0, 0xaf, 0xf0, 0x66, 0xa6, 0xd3, 0x2e, 0x8b, 0x42, 0x0c, 0xb7, 0xf7, 0xeb, 0x79,
	0xda, 0xe7, 0x79, 0x9b, 0x42, 0x27, 0xa2, 0x9c, 0x4a, 0x26, 0x07, 0x99, 0x48, 0x55, 0x8a, 0x16,
	0x0f, 0x04, 0xa5, 0x09, 0x91, 0x29, 0x17, 0xe3, 0x41, 0x44, 0x14, 0xfd, 0x42, 0xc6, 0x83, 0xd1,
	0x4a, 0xf7, 0x61, 0x94, 0xa6, 0x51, 0x4c, 0x3d, 0x92, 0x31, 0x8f, 0x70, 0x9e, 0x2a, 0xa2, 0x58,
	0xca, 0x0d, 0xaa, 0x7b, 0x37, 0x4a, 0xa3, 0x54, 0x87, 0x5e, 0x11, 0x99, 0x2a, 0x36, 0x78, 0x6f,
	0xb4, 0xe2, 0x59, 0x2a, 0xdd, 0x59, 0xfe, 0x5d, 0x85, 0xb9, 0xed, 0xf2, 0xdc, 0x8f, 0x8a, 0x28,
	0x8a, 0xde, 0x40, 0x3d, 0x23, 0x82, 0x24, 0x12, 0x3b, 0x3d, 0xa7, 0xdf, 0x5e, 0x75, 0x07, 0x57,
	0xdf, 0x63, 0xf0, 0x5e, 0x4f, 0x6d, 0xcc, 0x9c, 0xfc, 0x5c, 0xaa, 0xf8, 0x06, 0x83, 0xb6, 0xa1,
	0x69, 0x46, 0x24, 0xae, 0xf6, 0x6a, 0xfd, 0xf6, 0xea, 0xd3, 0xeb, 0xf0, 0xdb, 0x65, 0xb8, 0x75,
	0x9c, 0xa5, 0x42, 0x19, 0x9a, 0x09, 0x18, 0x71, 0x40, 0x26, 0x1e, 0xf2, 0x3c, 0x19, 0x32, 0x1e,
	0xd2, 0x63, 0x89, 0x6b, 0x9a, 0x72, 0xed, 0x5a, 0xca, 0x29, 0x21, 0x96, 0xff, 0x5d, 0x9e, 0xec,
	0x68, 0xf0, 0x16, 0x57, 0x62, 0x6c, 0xce, 0x59, 0x88, 0xfe, 0x6a, 0x76, 0x05, 0xdc, 0xbb, 0x12,
	0x80, 0x16, 0xa0, 0x76, 0x44, 0xc7, 0xda, 0x8c, 0x96, 0x5f, 0x84, 0x68, 0x13, 0x66, 0x47, 0x24,
	0xce, 0x29, 0xae, 0x6a, 0x83, 0x5e, 0xfe, 0x47, 0xa0, 0xe5, 0x2b, 0x85, 0xfa, 0x25, 0x76, 0xad,
	0xfa, 0xda, 0x59, 0xfe, 0xee, 0xfc, 0x73, 0x68, 0x39, 0x84, 0x9e, 0xc3, 0xbc, 0x55, 0x4f, 0xc2,
	0x50, 0x50, 0x29, 0xcd, 0x05, 0x6e, 0x99, 0xf2, 0x7a, 0x59, 0x45, 0x8f, 0x61, 0x8e, 0xe7, 0xc9,
	0x3e, 0x15, 0xa5, 0x43, 0xfa, 0x4a, 0x2d, 0xbf, 0x5d, 0xd6, 0x34, 0x23, 0x7a, 0x04, 0x60, 0x46,
	0x28, 0x0f, 0xb5, 0x83, 0x2d, 0xbf, 0x55, 0x56, 0xb6, 0x78, 0x88, 0x16, 0xa1, 0x2e, 0x15, 0x51,
	0xb9, 0xc4, 0x33, 0x3d, 0xa7, 0x5f, 0xf3, 0x4d, 0x86, 0xba, 0xd0, 0x1c, 0x91, 0x98, 0x85, 0x4c,
	0x8d, 0xf1, 0xac, 0xee, 0x4c, 0x72, 0xf4, 0x00, 0x9a, 0x4c, 0x0e, 0x0f, 0x98, 0x90, 0x0a, 0xd7,
	0x7b, 0x4e, 0xbf, 0xe9, 0x37, 0x98, 0x7c, 0x5b, 0xa4, 0xcb, 0xdf, 0x6a, 0xd0, 0xb9, 0xb4, 0xd9,
	0x1b, 0x69, 0x99, 0xac, 0x9c, 0x24, 0xd4, 0x6a, 0xb1, 0xab, 0x22, 0x09, 0x45, 0x4b, 0x60, 0xd3,
	0x61, 0x2e, 0x62, 0x5c, 0xd3, 0x13, 0x60, 0x4a, 0x7b, 0x22, 0x46, 0x4f, 0xa0, 0x63, 0x07, 0x3e,
	0xe7, 0xa9, 0x22, 0x46, 0x94, 0x25, 0xfe, 0x50, 0xd4, 0xa6, 0x24, 0xcf, 0x5e, 0x92, 0xbc, 0x7b,
	0xc1, 0xce, 0xf3, 0x04, 0xd7, 0xf5, 0x63, 0xbb, 0xd9, 0x7a, 0xcd, 0xfb, 0x82, 0x8b, 0xf7, 0x85,
	0x30, 0x34, 0x32, 0x12, 0x1c, 0x91, 0x88, 0xe2, 0x86, 0xbe, 0xaf, 0x4d, 0xd1, 0x7d, 0x68, 0x64,
	0xb4, 0x58, 0x5d, 0x88, 0x9b, 0xba, 0x53, 0x2f, 0xd2, 0x9d, 0xb0, 0xb0, 0x2c, 0x21, 0xc1, 0x21,
	0xe3, 0x74, 0x62, 0x59, 0xab, 0xb4, 0xcc, 0x94, 0xad, 0x65, 0x03, 0xb8, 0x63, 0x07, 0xf3, 0x2c,
	0x24, 0x8a, 0x0e, 0x15, 0x4b, 0x28, 0x06, 0x2d, 0xeb, 0xb6, 0x69, 0xed, 0xe9, 0xce, 0x2e, 0x4b,
	0x28, 0x7a, 0x06, 0xf3, 0x23, 0x12, 0x0f, 0x49, 0x10, 0x4c, 0x88, 0xdb, 0x9a, 0xb8, 0x33, 0x22,
	0xf1, 0x7a, 0x10, 0x18, 0xde, 0x8d, 0xcd, 0x93, 0x33, 0xd7, 0x39, 0x3d, 0x73, 0x9d, 0x5f, 0x67,
	0xae, 0xf3, 0xf5, 0xdc, 0xad, 0x9c, 0x9e, 0xbb, 0x95, 0x1f, 0xe7, 0x6e, 0xe5, 0xd3, 0x8b, 0x69,
	0x37, 0x82, 0xc0, 0xdb, 0x8f, 0xd3, 0xe0, 0x28, 0x38, 0x24, 0x8c, 0x7b, 0xc7, 0xf6, 0x6b, 0xf1,
	0xd4, 0x38, 0xa3, 0x72, 0xbf, 0xae, 0x7f, 0x98, 0x57, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x92,
	0x20, 0xf5, 0x30, 0xd8, 0x04, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GatewayNumIndexs) > 0 {
		for k := range m.GatewayNumIndexs {
			v := m.GatewayNumIndexs[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGenesis(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Gateways) > 0 {
		for iNdEx := len(m.Gateways) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Gateways[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GatewayNumIndexExport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayNumIndexExport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayNumIndexExport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsFirst {
		i--
		if m.IsFirst {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Validity != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Validity))
		i--
		dAtA[i] = 0x28
	}
	if m.Status != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.NumberEnd) > 0 {
		for iNdEx := len(m.NumberEnd) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NumberEnd[iNdEx])
			copy(dAtA[i:], m.NumberEnd[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.NumberEnd[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NumberIndex) > 0 {
		i -= len(m.NumberIndex)
		copy(dAtA[i:], m.NumberIndex)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.NumberIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GatewayAddress) > 0 {
		i -= len(m.GatewayAddress)
		copy(dAtA[i:], m.GatewayAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.GatewayAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GatewayExport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayExport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayExport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValAccAddress) > 0 {
		i -= len(m.ValAccAddress)
		copy(dAtA[i:], m.ValAccAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ValAccAddress)))
		i--
		dAtA[i] = 0x5a
	}
	if m.MachineUpdateTime != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MachineUpdateTime))
		i--
		dAtA[i] = 0x50
	}
	if len(m.MachineAddress) > 0 {
		i -= len(m.MachineAddress)
		copy(dAtA[i:], m.MachineAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.MachineAddress)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.PeerId) > 0 {
		i -= len(m.PeerId)
		copy(dAtA[i:], m.PeerId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.PeerId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Package) > 0 {
		i -= len(m.Package)
		copy(dAtA[i:], m.Package)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Package)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.GatewayNum) > 0 {
		for iNdEx := len(m.GatewayNum) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GatewayNum[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Status != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.GatewayQuota != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.GatewayQuota))
		i--
		dAtA[i] = 0x20
	}
	if len(m.GatewayUrl) > 0 {
		i -= len(m.GatewayUrl)
		copy(dAtA[i:], m.GatewayUrl)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.GatewayUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GatewayName) > 0 {
		i -= len(m.GatewayName)
		copy(dAtA[i:], m.GatewayName)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.GatewayName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GatewayAddress) > 0 {
		i -= len(m.GatewayAddress)
		copy(dAtA[i:], m.GatewayAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.GatewayAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.Gateways) > 0 {
		for _, e := range m.Gateways {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.GatewayNumIndexs) > 0 {
		for k, v := range m.GatewayNumIndexs {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovGenesis(uint64(len(k))) + 1 + l + sovGenesis(uint64(l))
			n += mapEntrySize + 1 + sovGenesis(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GatewayNumIndexExport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GatewayAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.NumberIndex)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.NumberEnd) > 0 {
		for _, s := range m.NumberEnd {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovGenesis(uint64(m.Status))
	}
	if m.Validity != 0 {
		n += 1 + sovGenesis(uint64(m.Validity))
	}
	if m.IsFirst {
		n += 2
	}
	return n
}

func (m *GatewayExport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GatewayAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.GatewayName)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.GatewayUrl)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.GatewayQuota != 0 {
		n += 1 + sovGenesis(uint64(m.GatewayQuota))
	}
	if m.Status != 0 {
		n += 1 + sovGenesis(uint64(m.Status))
	}
	if len(m.GatewayNum) > 0 {
		for _, e := range m.GatewayNum {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = len(m.Package)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.PeerId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.MachineAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.MachineUpdateTime != 0 {
		n += 1 + sovGenesis(uint64(m.MachineUpdateTime))
	}
	l = len(m.ValAccAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateways", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateways = append(m.Gateways, GatewayExport{})
			if err := m.Gateways[len(m.Gateways)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayNumIndexs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GatewayNumIndexs == nil {
				m.GatewayNumIndexs = make(map[string]GatewayNumIndexExport)
			}
			var mapkey string
			mapvalue := &GatewayNumIndexExport{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGenesis
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGenesis
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &GatewayNumIndexExport{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.GatewayNumIndexs[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayNumIndexExport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayNumIndexExport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayNumIndexExport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NumberIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberEnd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NumberEnd = append(m.NumberEnd, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validity", wireType)
			}
			m.Validity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Validity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFirst", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFirst = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayExport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayExport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayExport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayQuota", wireType)
			}
			m.GatewayQuota = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GatewayQuota |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayNum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayNum = append(m.GatewayNum, GatewayNumIndexExport{})
			if err := m.GatewayNum[len(m.GatewayNum)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Package", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Package = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineUpdateTime", wireType)
			}
			m.MachineUpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MachineUpdateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValAccAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValAccAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
