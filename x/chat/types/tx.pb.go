// Code generated by protoc-gen-gogo. DO NOT EDIT.

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

const _ = proto.GoGoProtoPackageIsVersion3 

type MsgMobileTransfer struct {
	FromAddress string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
	ToAddress   string `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty" yaml:"to_address"`
	Mobile      string `protobuf:"bytes,3,opt,name=mobile,proto3" json:"mobile,omitempty" yaml:"mobile"`
}

func (m *MsgMobileTransfer) Reset()         { *m = MsgMobileTransfer{} }
func (m *MsgMobileTransfer) String() string { return proto.CompactTextString(m) }
func (*MsgMobileTransfer) ProtoMessage()    {}
func (*MsgMobileTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{0}
}
func (m *MsgMobileTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMobileTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMobileTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMobileTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMobileTransfer.Merge(m, src)
}
func (m *MsgMobileTransfer) XXX_Size() int {
	return m.Size()
}
func (m *MsgMobileTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMobileTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMobileTransfer proto.InternalMessageInfo

func (m *MsgMobileTransfer) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgMobileTransfer) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *MsgMobileTransfer) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

type MsgBurnGetMobile struct {
	FromAddress    string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
	MobilePrefix   string `protobuf:"bytes,2,opt,name=mobile_prefix,json=mobilePrefix,proto3" json:"mobile_prefix,omitempty" yaml:"mobile_prefix"`
	GatewayAddress string `protobuf:"bytes,3,opt,name=gateway_address,json=gatewayAddress,proto3" json:"gateway_address,omitempty" yaml:"gateway_address"`
	ChatAddress    string `protobuf:"bytes,4,opt,name=chat_address,json=chatAddress,proto3" json:"chat_address,omitempty" yaml:"chat_address"`
}

func (m *MsgBurnGetMobile) Reset()         { *m = MsgBurnGetMobile{} }
func (m *MsgBurnGetMobile) String() string { return proto.CompactTextString(m) }
func (*MsgBurnGetMobile) ProtoMessage()    {}
func (*MsgBurnGetMobile) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{1}
}
func (m *MsgBurnGetMobile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnGetMobile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnGetMobile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnGetMobile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnGetMobile.Merge(m, src)
}
func (m *MsgBurnGetMobile) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnGetMobile) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnGetMobile.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnGetMobile proto.InternalMessageInfo

func (m *MsgBurnGetMobile) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgBurnGetMobile) GetMobilePrefix() string {
	if m != nil {
		return m.MobilePrefix
	}
	return ""
}

func (m *MsgBurnGetMobile) GetGatewayAddress() string {
	if m != nil {
		return m.GatewayAddress
	}
	return ""
}

func (m *MsgBurnGetMobile) GetChatAddress() string {
	if m != nil {
		return m.ChatAddress
	}
	return ""
}

type MsgSetChatInfo struct {
	FromAddress      string `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
	GatewayAddress   string `protobuf:"bytes,2,opt,name=gateway_address,json=gatewayAddress,proto3" json:"gateway_address,omitempty" yaml:"gateway_address"`
	AddressBook      string `protobuf:"bytes,3,opt,name=address_book,json=addressBook,proto3" json:"address_book,omitempty" yaml:"address_book"`
	ChatBlacklist    string `protobuf:"bytes,4,opt,name=chat_blacklist,json=chatBlacklist,proto3" json:"chat_blacklist,omitempty" yaml:"chat_blacklist"`
	ChatWhitelist    string `protobuf:"bytes,5,opt,name=chat_whitelist,json=chatWhitelist,proto3" json:"chat_whitelist,omitempty" yaml:"chat_whitelist"`
	UpdateTime       int64  `protobuf:"varint,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty" yaml:"update_time"`
	ChatBlacklistEnc string `protobuf:"bytes,7,opt,name=chat_blacklist_enc,json=chatBlacklistEnc,proto3" json:"chat_blacklist_enc,omitempty" yaml:"chat_blacklist_enc"`
	ChatWhitelistEnc string `protobuf:"bytes,8,opt,name=chat_whitelist_enc,json=chatWhitelistEnc,proto3" json:"chat_whitelist_enc,omitempty" yaml:"chat_whitelist_enc"`
}

func (m *MsgSetChatInfo) Reset()         { *m = MsgSetChatInfo{} }
func (m *MsgSetChatInfo) String() string { return proto.CompactTextString(m) }
func (*MsgSetChatInfo) ProtoMessage()    {}
func (*MsgSetChatInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{2}
}
func (m *MsgSetChatInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetChatInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetChatInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetChatInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetChatInfo.Merge(m, src)
}
func (m *MsgSetChatInfo) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetChatInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetChatInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetChatInfo proto.InternalMessageInfo

func (m *MsgSetChatInfo) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgSetChatInfo) GetGatewayAddress() string {
	if m != nil {
		return m.GatewayAddress
	}
	return ""
}

func (m *MsgSetChatInfo) GetAddressBook() string {
	if m != nil {
		return m.AddressBook
	}
	return ""
}

func (m *MsgSetChatInfo) GetChatBlacklist() string {
	if m != nil {
		return m.ChatBlacklist
	}
	return ""
}

func (m *MsgSetChatInfo) GetChatWhitelist() string {
	if m != nil {
		return m.ChatWhitelist
	}
	return ""
}

func (m *MsgSetChatInfo) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *MsgSetChatInfo) GetChatBlacklistEnc() string {
	if m != nil {
		return m.ChatBlacklistEnc
	}
	return ""
}

func (m *MsgSetChatInfo) GetChatWhitelistEnc() string {
	if m != nil {
		return m.ChatWhitelistEnc
	}
	return ""
}

type MsgEmptyResponse struct {
}

func (m *MsgEmptyResponse) Reset()         { *m = MsgEmptyResponse{} }
func (m *MsgEmptyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEmptyResponse) ProtoMessage()    {}
func (*MsgEmptyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fd2153dc07d3b5c, []int{3}
}
func (m *MsgEmptyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEmptyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEmptyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEmptyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEmptyResponse.Merge(m, src)
}
func (m *MsgEmptyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEmptyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEmptyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEmptyResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgMobileTransfer)(nil), "freemasonry.chat.v1.MsgMobileTransfer")
	proto.RegisterType((*MsgBurnGetMobile)(nil), "freemasonry.chat.v1.MsgBurnGetMobile")
	proto.RegisterType((*MsgSetChatInfo)(nil), "freemasonry.chat.v1.MsgSetChatInfo")
	proto.RegisterType((*MsgEmptyResponse)(nil), "freemasonry.chat.v1.MsgEmptyResponse")
}

func init() { proto.RegisterFile("tx.proto", fileDescriptor_0fd2153dc07d3b5c) }

var fileDescriptor_0fd2153dc07d3b5c = []byte{
	
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xdb, 0x6a, 0xdb, 0x3e,
	0x1c, 0xae, 0xd3, 0xfe, 0xf3, 0x6f, 0x95, 0xc3, 0x1a, 0xf5, 0xb0, 0x34, 0x30, 0xbb, 0x68, 0xac,
	0x74, 0x37, 0x09, 0x3b, 0xc0, 0x20, 0x30, 0xe8, 0x5c, 0xc2, 0x18, 0x23, 0x30, 0xbc, 0xc2, 0xd8,
	0x60, 0x18, 0xc7, 0x51, 0x1c, 0x93, 0xd8, 0x32, 0x96, 0xba, 0x26, 0x2f, 0x31, 0xf6, 0x08, 0xbb,
	0xd8, 0x03, 0xec, 0x31, 0x76, 0xd9, 0xcb, 0x5d, 0x99, 0x91, 0xbc, 0x81, 0x9f, 0x60, 0x58, 0x52,
	0x3c, 0x3b, 0x4b, 0xa0, 0xac, 0x77, 0xf9, 0xf4, 0x1d, 0xf4, 0xfd, 0x14, 0x4b, 0x60, 0x9b, 0x4d,
	0x9a, 0x41, 0x48, 0x18, 0x81, 0x7b, 0x83, 0x10, 0x63, 0xcf, 0xa2, 0xc4, 0x0f, 0xa7, 0x4d, 0x7b,
	0x68, 0xb1, 0xe6, 0xa7, 0x47, 0x8d, 0x7d, 0x87, 0x38, 0x84, 0xf3, 0xad, 0xe4, 0x97, 0x90, 0xa2,
	0xef, 0x0a, 0xa8, 0x75, 0xa9, 0xd3, 0x25, 0x3d, 0x77, 0x8c, 0x2f, 0x42, 0xcb, 0xa7, 0x03, 0x1c,
	0xc2, 0x36, 0x28, 0x0f, 0x42, 0xe2, 0x99, 0x56, 0xbf, 0x1f, 0x62, 0x4a, 0xeb, 0xca, 0xb1, 0x72,
	0xba, 0xa3, 0xdf, 0x8d, 0x23, 0x6d, 0x6f, 0x6a, 0x79, 0xe3, 0x36, 0xca, 0xb2, 0xc8, 0x28, 0x25,
	0xf0, 0x85, 0x40, 0xf0, 0x29, 0x00, 0x8c, 0xa4, 0xce, 0x02, 0x77, 0x1e, 0xc4, 0x91, 0x56, 0x13,
	0xce, 0x3f, 0x1c, 0x32, 0x76, 0x18, 0x59, 0xb8, 0x1e, 0x82, 0xa2, 0xc7, 0x3b, 0xd4, 0x37, 0xb9,
	0xa3, 0x16, 0x47, 0x5a, 0x45, 0x38, 0xc4, 0x3a, 0x32, 0xa4, 0x00, 0x7d, 0x2e, 0x80, 0xdd, 0x2e,
	0x75, 0xf4, 0xcb, 0xd0, 0x7f, 0x89, 0x99, 0x68, 0x7e, 0xab, 0xc6, 0xcf, 0x41, 0x45, 0x44, 0x9b,
	0x41, 0x88, 0x07, 0xee, 0x44, 0x96, 0xae, 0xc7, 0x91, 0xb6, 0x9f, 0xad, 0x20, 0x69, 0x64, 0x94,
	0x05, 0x7e, 0xc3, 0x21, 0x3c, 0x07, 0x77, 0x1c, 0x8b, 0xe1, 0x2b, 0x6b, 0x9a, 0xee, 0x2e, 0x66,
	0x68, 0xc4, 0x91, 0x76, 0x28, 0x02, 0x96, 0x04, 0xc8, 0xa8, 0xca, 0x95, 0x45, 0x87, 0x36, 0x28,
	0x27, 0x7f, 0x54, 0x9a, 0xb0, 0xb5, 0xdc, 0x3f, 0xcb, 0x22, 0xa3, 0x94, 0x40, 0xe9, 0x45, 0xdf,
	0xb6, 0x40, 0xb5, 0x4b, 0x9d, 0xb7, 0x98, 0x9d, 0x0f, 0x2d, 0xf6, 0xca, 0x1f, 0x90, 0x5b, 0x1d,
	0xc7, 0x8a, 0x79, 0x0a, 0xff, 0x32, 0x8f, 0xe4, 0xcc, 0x1e, 0x21, 0x23, 0x79, 0x22, 0x99, 0x02,
	0x59, 0x16, 0x19, 0x25, 0x09, 0x75, 0x42, 0x46, 0xf0, 0x0c, 0x54, 0xf9, 0xb4, 0xbd, 0xb1, 0x65,
	0x8f, 0xc6, 0x2e, 0x65, 0xf2, 0x34, 0x8e, 0xe2, 0x48, 0x3b, 0xc8, 0x9c, 0x46, 0xca, 0x23, 0xa3,
	0x92, 0x2c, 0xe8, 0x0b, 0x9c, 0x26, 0x5c, 0x0d, 0x5d, 0x86, 0x79, 0xc2, 0x7f, 0x2b, 0x13, 0x52,
	0x5e, 0x26, 0xbc, 0x5b, 0x60, 0xf8, 0x0c, 0x94, 0x2e, 0x83, 0xbe, 0xc5, 0xb0, 0xc9, 0x5c, 0x0f,
	0xd7, 0x8b, 0xc7, 0xca, 0xe9, 0xa6, 0x7e, 0x18, 0x47, 0x1a, 0x14, 0xf6, 0x0c, 0x89, 0x0c, 0x20,
	0xd0, 0x85, 0xeb, 0x61, 0xf8, 0x1a, 0xc0, 0x7c, 0x39, 0x13, 0xfb, 0x76, 0xfd, 0x7f, 0xbe, 0xfd,
	0xbd, 0x38, 0xd2, 0x8e, 0x56, 0x0d, 0x90, 0x68, 0x90, 0xb1, 0x9b, 0x1b, 0xa2, 0xe3, 0xdb, 0x69,
	0x58, 0xda, 0x93, 0x87, 0x6d, 0xaf, 0x0c, 0xcb, 0x69, 0x64, 0x58, 0x3a, 0x4f, 0xc7, 0xb7, 0x11,
	0xe4, 0xd7, 0xa6, 0xe3, 0x05, 0x6c, 0x6a, 0x60, 0x1a, 0x10, 0x9f, 0xe2, 0xc7, 0x5f, 0x0b, 0x60,
	0xb3, 0x4b, 0x1d, 0x68, 0x82, 0xea, 0xd2, 0x13, 0x70, 0xd2, 0x5c, 0xf1, 0x88, 0x34, 0xff, 0x7a,
	0x2a, 0x1a, 0x0f, 0xd6, 0xe9, 0x72, 0x1b, 0xc1, 0x8f, 0xa0, 0x92, 0xbf, 0xb0, 0x6b, 0x7d, 0x39,
	0xd9, 0x4d, 0xe3, 0xdf, 0x83, 0x52, 0xf6, 0xf3, 0xbf, 0xbf, 0xce, 0x95, 0x11, 0xdd, 0x30, 0x5a,
	0x3f, 0xfb, 0x31, 0x53, 0x95, 0xeb, 0x99, 0xaa, 0xfc, 0x9a, 0xa9, 0xca, 0x97, 0xb9, 0xba, 0x71,
	0x3d, 0x57, 0x37, 0x7e, 0xce, 0xd5, 0x8d, 0x0f, 0x27, 0x39, 0xbf, 0xdd, 0xea, 0x8d, 0x89, 0x3d,
	0xb2, 0x87, 0x96, 0xeb, 0xb7, 0x26, 0xad, 0x24, 0xaf, 0xc5, 0xa6, 0x01, 0xa6, 0xbd, 0x22, 0x7f,
	0x6a, 0x9f, 0xfc, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x3e, 0xcc, 0xfd, 0x98, 0xa1, 0x05, 0x00, 0x00,
}

var _ context.Context
var _ grpc.ClientConn

const _ = grpc.SupportPackageIsVersion4


type MsgClient interface {
	MobileTransfer(ctx context.Context, in *MsgMobileTransfer, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	BurnGetMobile(ctx context.Context, in *MsgBurnGetMobile, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
	SetChatInfo(ctx context.Context, in *MsgSetChatInfo, opts ...grpc.CallOption) (*MsgEmptyResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) MobileTransfer(ctx context.Context, in *MsgMobileTransfer, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.chat.v1.Msg/MobileTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BurnGetMobile(ctx context.Context, in *MsgBurnGetMobile, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.chat.v1.Msg/BurnGetMobile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetChatInfo(ctx context.Context, in *MsgSetChatInfo, opts ...grpc.CallOption) (*MsgEmptyResponse, error) {
	out := new(MsgEmptyResponse)
	err := c.cc.Invoke(ctx, "/freemasonry.chat.v1.Msg/SetChatInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type MsgServer interface {
	MobileTransfer(context.Context, *MsgMobileTransfer) (*MsgEmptyResponse, error)
	BurnGetMobile(context.Context, *MsgBurnGetMobile) (*MsgEmptyResponse, error)
	SetChatInfo(context.Context, *MsgSetChatInfo) (*MsgEmptyResponse, error)
}

type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) MobileTransfer(ctx context.Context, req *MsgMobileTransfer) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MobileTransfer not implemented")
}
func (*UnimplementedMsgServer) BurnGetMobile(ctx context.Context, req *MsgBurnGetMobile) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnGetMobile not implemented")
}
func (*UnimplementedMsgServer) SetChatInfo(ctx context.Context, req *MsgSetChatInfo) (*MsgEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChatInfo not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_MobileTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMobileTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MobileTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.chat.v1.Msg/MobileTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MobileTransfer(ctx, req.(*MsgMobileTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BurnGetMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBurnGetMobile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BurnGetMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.chat.v1.Msg/BurnGetMobile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BurnGetMobile(ctx, req.(*MsgBurnGetMobile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetChatInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetChatInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetChatInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freemasonry.chat.v1.Msg/SetChatInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetChatInfo(ctx, req.(*MsgSetChatInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "freemasonry.chat.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MobileTransfer",
			Handler:    _Msg_MobileTransfer_Handler,
		},
		{
			MethodName: "BurnGetMobile",
			Handler:    _Msg_BurnGetMobile_Handler,
		},
		{
			MethodName: "SetChatInfo",
			Handler:    _Msg_SetChatInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tx.proto",
}

func (m *MsgMobileTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMobileTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMobileTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mobile) > 0 {
		i -= len(m.Mobile)
		copy(dAtA[i:], m.Mobile)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Mobile)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBurnGetMobile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnGetMobile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnGetMobile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChatAddress) > 0 {
		i -= len(m.ChatAddress)
		copy(dAtA[i:], m.ChatAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChatAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GatewayAddress) > 0 {
		i -= len(m.GatewayAddress)
		copy(dAtA[i:], m.GatewayAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GatewayAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MobilePrefix) > 0 {
		i -= len(m.MobilePrefix)
		copy(dAtA[i:], m.MobilePrefix)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MobilePrefix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetChatInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetChatInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetChatInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChatWhitelistEnc) > 0 {
		i -= len(m.ChatWhitelistEnc)
		copy(dAtA[i:], m.ChatWhitelistEnc)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChatWhitelistEnc)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ChatBlacklistEnc) > 0 {
		i -= len(m.ChatBlacklistEnc)
		copy(dAtA[i:], m.ChatBlacklistEnc)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChatBlacklistEnc)))
		i--
		dAtA[i] = 0x3a
	}
	if m.UpdateTime != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.UpdateTime))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ChatWhitelist) > 0 {
		i -= len(m.ChatWhitelist)
		copy(dAtA[i:], m.ChatWhitelist)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChatWhitelist)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ChatBlacklist) > 0 {
		i -= len(m.ChatBlacklist)
		copy(dAtA[i:], m.ChatBlacklist)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChatBlacklist)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AddressBook) > 0 {
		i -= len(m.AddressBook)
		copy(dAtA[i:], m.AddressBook)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AddressBook)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GatewayAddress) > 0 {
		i -= len(m.GatewayAddress)
		copy(dAtA[i:], m.GatewayAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GatewayAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEmptyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEmptyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEmptyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgMobileTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Mobile)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBurnGetMobile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MobilePrefix)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GatewayAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChatAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetChatInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GatewayAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AddressBook)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChatBlacklist)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChatWhitelist)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.UpdateTime != 0 {
		n += 1 + sovTx(uint64(m.UpdateTime))
	}
	l = len(m.ChatBlacklistEnc)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChatWhitelistEnc)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgEmptyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgMobileTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMobileTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMobileTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnGetMobile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnGetMobile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnGetMobile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobilePrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobilePrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetChatInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetChatInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetChatInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressBook", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressBook = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatBlacklist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatBlacklist = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatWhitelist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatWhitelist = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatBlacklistEnc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatBlacklistEnc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatWhitelistEnc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatWhitelistEnc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEmptyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEmptyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEmptyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
